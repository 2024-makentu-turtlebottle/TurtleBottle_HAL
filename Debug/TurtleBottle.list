
TurtleBottle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080036a8  080036a8  000136a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003718  08003718  000238b0  2**0
                  CONTENTS
  4 .ARM          00000008  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003720  08003720  000238b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000038b0  20000000  08003728  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e808  200038b0  08006fd8  000238b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200120b8  08006fd8  000320b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000238b0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000238e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007025  00000000  00000000  00023998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a4d  00000000  00000000  0002a9bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000500  00000000  00000000  0002c410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000343  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c58  00000000  00000000  0002cc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007371  00000000  00000000  0004d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a28  00000000  00000000  00054c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000170c  00000000  00000000  0011b644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001131  00000000  00000000  0011cdb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000040  00000000  00000000  0011dee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200038b0 	.word	0x200038b0
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003690 	.word	0x08003690

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200038b4 	.word	0x200038b4
 8000204:	08003690 	.word	0x08003690

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b970 	b.w	8000e78 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9e08      	ldr	r6, [sp, #32]
 8000bb6:	460d      	mov	r5, r1
 8000bb8:	4604      	mov	r4, r0
 8000bba:	460f      	mov	r7, r1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d14a      	bne.n	8000c56 <__udivmoddi4+0xa6>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4694      	mov	ip, r2
 8000bc4:	d965      	bls.n	8000c92 <__udivmoddi4+0xe2>
 8000bc6:	fab2 f382 	clz	r3, r2
 8000bca:	b143      	cbz	r3, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bd0:	f1c3 0220 	rsb	r2, r3, #32
 8000bd4:	409f      	lsls	r7, r3
 8000bd6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	409c      	lsls	r4, r3
 8000bde:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000be2:	fa1f f58c 	uxth.w	r5, ip
 8000be6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bea:	0c22      	lsrs	r2, r4, #16
 8000bec:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bf0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf4:	fb01 f005 	mul.w	r0, r1, r5
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x62>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c04:	f080 811c 	bcs.w	8000e40 <__udivmoddi4+0x290>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f240 8119 	bls.w	8000e40 <__udivmoddi4+0x290>
 8000c0e:	3902      	subs	r1, #2
 8000c10:	4462      	add	r2, ip
 8000c12:	1a12      	subs	r2, r2, r0
 8000c14:	b2a4      	uxth	r4, r4
 8000c16:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c22:	fb00 f505 	mul.w	r5, r0, r5
 8000c26:	42a5      	cmp	r5, r4
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x90>
 8000c2a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c32:	f080 8107 	bcs.w	8000e44 <__udivmoddi4+0x294>
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	f240 8104 	bls.w	8000e44 <__udivmoddi4+0x294>
 8000c3c:	4464      	add	r4, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11e      	cbz	r6, 8000c52 <__udivmoddi4+0xa2>
 8000c4a:	40dc      	lsrs	r4, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0xbc>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	f000 80ed 	beq.w	8000e3a <__udivmoddi4+0x28a>
 8000c60:	2100      	movs	r1, #0
 8000c62:	e9c6 0500 	strd	r0, r5, [r6]
 8000c66:	4608      	mov	r0, r1
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	fab3 f183 	clz	r1, r3
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d149      	bne.n	8000d08 <__udivmoddi4+0x158>
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	d302      	bcc.n	8000c7e <__udivmoddi4+0xce>
 8000c78:	4282      	cmp	r2, r0
 8000c7a:	f200 80f8 	bhi.w	8000e6e <__udivmoddi4+0x2be>
 8000c7e:	1a84      	subs	r4, r0, r2
 8000c80:	eb65 0203 	sbc.w	r2, r5, r3
 8000c84:	2001      	movs	r0, #1
 8000c86:	4617      	mov	r7, r2
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d0e2      	beq.n	8000c52 <__udivmoddi4+0xa2>
 8000c8c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c90:	e7df      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xe6>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f382 	clz	r3, r2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x210>
 8000ca0:	1a8a      	subs	r2, r1, r2
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2101      	movs	r1, #1
 8000cac:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cb0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb4:	0c22      	lsrs	r2, r4, #16
 8000cb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cba:	fb0e f005 	mul.w	r0, lr, r5
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x124>
 8000cc2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x122>
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2b8>
 8000cd2:	4645      	mov	r5, r8
 8000cd4:	1a12      	subs	r2, r2, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x14e>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x14c>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2c2>
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d06:	e79f      	b.n	8000c48 <__udivmoddi4+0x98>
 8000d08:	f1c1 0720 	rsb	r7, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa05 f401 	lsl.w	r4, r5, r1
 8000d1a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1e:	40fd      	lsrs	r5, r7
 8000d20:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d38:	fb08 f50e 	mul.w	r5, r8, lr
 8000d3c:	42a5      	cmp	r5, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	fa00 f001 	lsl.w	r0, r0, r1
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b0>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2b4>
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2b4>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4464      	add	r4, ip
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	b29d      	uxth	r5, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d70:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1da>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2ac>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2ac>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	4464      	add	r4, ip
 8000d8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	42ac      	cmp	r4, r5
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46ae      	mov	lr, r5
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x29c>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x298>
 8000da0:	b156      	cbz	r6, 8000db8 <__udivmoddi4+0x208>
 8000da2:	ebb0 0208 	subs.w	r2, r0, r8
 8000da6:	eb64 040e 	sbc.w	r4, r4, lr
 8000daa:	fa04 f707 	lsl.w	r7, r4, r7
 8000dae:	40ca      	lsrs	r2, r1
 8000db0:	40cc      	lsrs	r4, r1
 8000db2:	4317      	orrs	r7, r2
 8000db4:	e9c6 7400 	strd	r7, r4, [r6]
 8000db8:	4618      	mov	r0, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc0:	f1c3 0120 	rsb	r1, r3, #32
 8000dc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dcc:	fa25 f101 	lsr.w	r1, r5, r1
 8000dd0:	409d      	lsls	r5, r3
 8000dd2:	432a      	orrs	r2, r5
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1510 	mls	r5, r7, r0, r1
 8000de4:	0c11      	lsrs	r1, r2, #16
 8000de6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dea:	fb00 f50e 	mul.w	r5, r0, lr
 8000dee:	428d      	cmp	r5, r1
 8000df0:	fa04 f403 	lsl.w	r4, r4, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x258>
 8000df6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e00:	428d      	cmp	r5, r1
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1b49      	subs	r1, r1, r5
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e10:	fb07 1115 	mls	r1, r7, r5, r1
 8000e14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e18:	fb05 f10e 	mul.w	r1, r5, lr
 8000e1c:	4291      	cmp	r1, r2
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x282>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000e2a:	4291      	cmp	r1, r2
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000e2e:	3d02      	subs	r5, #2
 8000e30:	4462      	add	r2, ip
 8000e32:	1a52      	subs	r2, r2, r1
 8000e34:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0xfc>
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	e708      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000e40:	4639      	mov	r1, r7
 8000e42:	e6e6      	b.n	8000c12 <__udivmoddi4+0x62>
 8000e44:	4610      	mov	r0, r2
 8000e46:	e6fb      	b.n	8000c40 <__udivmoddi4+0x90>
 8000e48:	4548      	cmp	r0, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f0>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e54:	3b01      	subs	r3, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f0>
 8000e58:	4645      	mov	r5, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x282>
 8000e5c:	462b      	mov	r3, r5
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1da>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x258>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b0>
 8000e68:	3d02      	subs	r5, #2
 8000e6a:	4462      	add	r2, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x124>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e70a      	b.n	8000c88 <__udivmoddi4+0xd8>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x14e>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <clearQueue>:

float32_t X_f32[2];

Queue q;

void clearQueue() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
    q.front = -1;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <clearQueue+0x30>)
 8000e82:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e86:	461a      	mov	r2, r3
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    q.rear = -1;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <clearQueue+0x30>)
 8000e92:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000e96:	461a      	mov	r2, r3
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20008970 	.word	0x20008970

08000eb0 <isEmpty>:

// 檢查隊列是否為空
bool isEmpty() {
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
    return q.rear == -1;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <isEmpty+0x24>)
 8000eb6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000eba:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8000ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20008970 	.word	0x20008970

08000ed8 <enqueue>:

// 將元素放入隊列
void enqueue(Point item) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	463b      	mov	r3, r7
 8000ee0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (q.rear == WIDTH * HEIGHT - 1)
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <enqueue+0x7c>)
 8000ee6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000eea:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8000eee:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d027      	beq.n	8000f46 <enqueue+0x6e>
        return;
    if (q.front == -1)
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <enqueue+0x7c>)
 8000ef8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000efc:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d106      	bne.n	8000f14 <enqueue+0x3c>
        q.front = 0;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <enqueue+0x7c>)
 8000f08:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    q.rear++;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <enqueue+0x7c>)
 8000f16:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000f1a:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8000f1e:	3301      	adds	r3, #1
 8000f20:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <enqueue+0x7c>)
 8000f22:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8000f26:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
    q.items[q.rear] = item;
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <enqueue+0x7c>)
 8000f2c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000f30:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <enqueue+0x7c>)
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	463a      	mov	r2, r7
 8000f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f40:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f44:	e000      	b.n	8000f48 <enqueue+0x70>
        return;
 8000f46:	bf00      	nop
}
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20008970 	.word	0x20008970

08000f58 <dequeue>:

// 從隊列中取出元素
Point dequeue() {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    Point item = {-1, -1};
 8000f60:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <dequeue+0xb8>)
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6a:	e883 0003 	stmia.w	r3, {r0, r1}
    if (isEmpty())
 8000f6e:	f7ff ff9f 	bl	8000eb0 <isEmpty>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d008      	beq.n	8000f8a <dequeue+0x32>
        return item;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f84:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f88:	e03e      	b.n	8001008 <dequeue+0xb0>
    item = q.items[q.front];
 8000f8a:	4b22      	ldr	r3, [pc, #136]	; (8001014 <dequeue+0xbc>)
 8000f8c:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000f90:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 8000f94:	491f      	ldr	r1, [pc, #124]	; (8001014 <dequeue+0xbc>)
 8000f96:	f107 0208 	add.w	r2, r7, #8
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fa2:	e882 0003 	stmia.w	r2, {r0, r1}
    q.front++;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <dequeue+0xbc>)
 8000fa8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000fac:	f8d3 3600 	ldr.w	r3, [r3, #1536]	; 0x600
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a18      	ldr	r2, [pc, #96]	; (8001014 <dequeue+0xbc>)
 8000fb4:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8000fb8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    if (q.front > q.rear)
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <dequeue+0xbc>)
 8000fbe:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000fc2:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <dequeue+0xbc>)
 8000fc8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000fcc:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	dd11      	ble.n	8000ff8 <dequeue+0xa0>
        q.front = q.rear = -1;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <dequeue+0xbc>)
 8000fd6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <dequeue+0xbc>)
 8000fe6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000fea:	f8d3 3604 	ldr.w	r3, [r3, #1540]	; 0x604
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <dequeue+0xbc>)
 8000ff0:	f502 4210 	add.w	r2, r2, #36864	; 0x9000
 8000ff4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    return item;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001004:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	080036a8 	.word	0x080036a8
 8001014:	20008970 	.word	0x20008970

08001018 <calculateDistanceSquared>:

// 計算兩個像素之間的歐式距離
float calculateDistanceSquared(unsigned char a[CHANNELS], unsigned char b[CHANNELS]) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
    float distance = 0.0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < CHANNELS; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	e02a      	b.n	8001084 <calculateDistanceSquared+0x6c>
        distance += pow(a[i] - b[i], 2);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	1acb      	subs	r3, r1, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa32 	bl	80004ac <__aeabi_i2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80010a0 <calculateDistanceSquared+0x88>
 8001050:	ec43 2b10 	vmov	d0, r2, r3
 8001054:	f001 fbe4 	bl	8002820 <pow>
 8001058:	ec55 4b10 	vmov	r4, r5, d0
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff fa37 	bl	80004d0 <__aeabi_f2d>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4620      	mov	r0, r4
 8001068:	4629      	mov	r1, r5
 800106a:	f7ff f8d3 	bl	8000214 <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd33 	bl	8000ae0 <__aeabi_d2f>
 800107a:	4603      	mov	r3, r0
 800107c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < CHANNELS; i++) {
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b02      	cmp	r3, #2
 8001088:	ddd1      	ble.n	800102e <calculateDistanceSquared+0x16>
    }
    return distance;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	ee07 3a90 	vmov	s15, r3
}
 8001090:	eeb0 0a67 	vmov.f32	s0, s15
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bdb0      	pop	{r4, r5, r7, pc}
 800109a:	bf00      	nop
 800109c:	f3af 8000 	nop.w
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40000000 	.word	0x40000000

080010a8 <bfs>:

// BFS算法
//void bfs(unsigned char data[HEIGHT][WIDTH][CHANNELS], unsigned char dst[HEIGHT][WIDTH], Point start) {
void bfs() {
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b094      	sub	sp, #80	; 0x50
 80010ac:	af00      	add	r7, sp, #0
	Point start = {WIDTH / 2 - 1, HEIGHT / 2 - 1};
 80010ae:	4a59      	ldr	r2, [pc, #356]	; (8001214 <bfs+0x16c>)
 80010b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b8:	e883 0003 	stmia.w	r3, {r0, r1}

	// Clear dst array
    for (int i = 0; i < HEIGHT; i++) {
 80010bc:	2300      	movs	r3, #0
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010c0:	e016      	b.n	80010f0 <bfs+0x48>
        for (int j = 0; j < WIDTH; j++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80010c6:	e00d      	b.n	80010e4 <bfs+0x3c>
            dst[i][j] = 0;
 80010c8:	4953      	ldr	r1, [pc, #332]	; (8001218 <bfs+0x170>)
 80010ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80010cc:	4613      	mov	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	18ca      	adds	r2, r1, r3
 80010d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010d8:	4413      	add	r3, r2
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
        for (int j = 0; j < WIDTH; j++) {
 80010de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e0:	3301      	adds	r3, #1
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80010e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e6:	2b3b      	cmp	r3, #59	; 0x3b
 80010e8:	ddee      	ble.n	80010c8 <bfs+0x20>
    for (int i = 0; i < HEIGHT; i++) {
 80010ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ec:	3301      	adds	r3, #1
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f2:	2b4f      	cmp	r3, #79	; 0x4f
 80010f4:	dde5      	ble.n	80010c2 <bfs+0x1a>
        }
    }
    clearQueue();
 80010f6:	f7ff fec1 	bl	8000e7c <clearQueue>

    int dirs[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
 80010fa:	4b48      	ldr	r3, [pc, #288]	; (800121c <bfs+0x174>)
 80010fc:	f107 0414 	add.w	r4, r7, #20
 8001100:	461d      	mov	r5, r3
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800110a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    enqueue(start);
 800110e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001112:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001116:	f7ff fedf 	bl	8000ed8 <enqueue>

    while (!isEmpty()) {
 800111a:	e06d      	b.n	80011f8 <bfs+0x150>
        Point current = dequeue();
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff19 	bl	8000f58 <dequeue>
        for (int i = 0; i < 4; i++) {
 8001126:	2300      	movs	r3, #0
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
 800112a:	e062      	b.n	80011f2 <bfs+0x14a>
            int next_x = current.x + dirs[i][0];
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	3350      	adds	r3, #80	; 0x50
 8001134:	443b      	add	r3, r7
 8001136:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800113a:	4413      	add	r3, r2
 800113c:	643b      	str	r3, [r7, #64]	; 0x40
            int next_y = current.y + dirs[i][1];
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	3350      	adds	r3, #80	; 0x50
 8001146:	443b      	add	r3, r7
 8001148:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800114c:	4413      	add	r3, r2
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (next_x >= 0 && next_x < WIDTH && next_y >= 0 && next_y < HEIGHT) {
 8001150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	db4a      	blt.n	80011ec <bfs+0x144>
 8001156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001158:	2b3b      	cmp	r3, #59	; 0x3b
 800115a:	dc47      	bgt.n	80011ec <bfs+0x144>
 800115c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800115e:	2b00      	cmp	r3, #0
 8001160:	db44      	blt.n	80011ec <bfs+0x144>
 8001162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001164:	2b4f      	cmp	r3, #79	; 0x4f
 8001166:	dc41      	bgt.n	80011ec <bfs+0x144>
                if (dst[next_y][next_x] == 0 && calculateDistanceSquared(data[next_y][next_x], data[current.y][current.x]) < (DISTANCE * DISTANCE)) {
 8001168:	492b      	ldr	r1, [pc, #172]	; (8001218 <bfs+0x170>)
 800116a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800116c:	4613      	mov	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	18ca      	adds	r2, r1, r3
 8001176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d135      	bne.n	80011ec <bfs+0x144>
 8001180:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800118a:	21b4      	movs	r1, #180	; 0xb4
 800118c:	fb01 f202 	mul.w	r2, r1, r2
 8001190:	4413      	add	r3, r2
 8001192:	4a23      	ldr	r2, [pc, #140]	; (8001220 <bfs+0x178>)
 8001194:	1898      	adds	r0, r3, r2
 8001196:	6939      	ldr	r1, [r7, #16]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	22b4      	movs	r2, #180	; 0xb4
 80011a2:	fb01 f202 	mul.w	r2, r1, r2
 80011a6:	4413      	add	r3, r2
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <bfs+0x178>)
 80011aa:	4413      	add	r3, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff ff33 	bl	8001018 <calculateDistanceSquared>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001224 <bfs+0x17c>
 80011ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d513      	bpl.n	80011ec <bfs+0x144>
                    dst[next_y][next_x] = 1;
 80011c4:	4914      	ldr	r1, [pc, #80]	; (8001218 <bfs+0x170>)
 80011c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011c8:	4613      	mov	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	18ca      	adds	r2, r1, r3
 80011d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011d4:	4413      	add	r3, r2
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
                    Point next_point = {next_x, next_y};
 80011da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011e0:	60bb      	str	r3, [r7, #8]
                    enqueue(next_point);
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011e8:	f7ff fe76 	bl	8000ed8 <enqueue>
        for (int i = 0; i < 4; i++) {
 80011ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ee:	3301      	adds	r3, #1
 80011f0:	647b      	str	r3, [r7, #68]	; 0x44
 80011f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	dd99      	ble.n	800112c <bfs+0x84>
    while (!isEmpty()) {
 80011f8:	f7ff fe5a 	bl	8000eb0 <isEmpty>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f083 0301 	eor.w	r3, r3, #1
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d189      	bne.n	800111c <bfs+0x74>
                }
            }
        }
    }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	; 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	080036b0 	.word	0x080036b0
 8001218:	2000710c 	.word	0x2000710c
 800121c:	080036b8 	.word	0x080036b8
 8001220:	200038cc 	.word	0x200038cc
 8001224:	42f20000 	.word	0x42f20000

08001228 <get_edge>:
//        edgesL.append([j, i])
//        break
//
//  return np.array(edgesL)

void get_edge() {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
	num_data = 0;
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <get_edge+0xc8>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < HEIGHT; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	e04f      	b.n	80012da <get_edge+0xb2>
		for (int j = 0; j < WIDTH - 1; j++) {
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	e042      	b.n	80012c6 <get_edge+0x9e>
			if (dst[i][j] == 0 && dst[i][j+1] == 1) {
 8001240:	492c      	ldr	r1, [pc, #176]	; (80012f4 <get_edge+0xcc>)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	18ca      	adds	r2, r1, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d133      	bne.n	80012c0 <get_edge+0x98>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	1c59      	adds	r1, r3, #1
 800125c:	4825      	ldr	r0, [pc, #148]	; (80012f4 <get_edge+0xcc>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4403      	add	r3, r0
 800126a:	440b      	add	r3, r1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d126      	bne.n	80012c0 <get_edge+0x98>
				A_f32[num_data][0] = i;
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <get_edge+0xc8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	ee07 2a90 	vmov	s15, r2
 800127c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <get_edge+0xd0>)
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	edc3 7a00 	vstr	s15, [r3]
				A_f32[num_data][1] = 1;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <get_edge+0xc8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <get_edge+0xd0>)
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800129a:	601a      	str	r2, [r3, #0]

				B_f32[num_data] = j;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <get_edge+0xc8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	ee07 2a90 	vmov	s15, r2
 80012a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <get_edge+0xd4>)
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	edc3 7a00 	vstr	s15, [r3]
				num_data += 1;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <get_edge+0xc8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <get_edge+0xc8>)
 80012bc:	6013      	str	r3, [r2, #0]
				break;
 80012be:	e005      	b.n	80012cc <get_edge+0xa4>
		for (int j = 0; j < WIDTH - 1; j++) {
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b3a      	cmp	r3, #58	; 0x3a
 80012ca:	ddb9      	ble.n	8001240 <get_edge+0x18>
			}
		}
		if (num_data == NUM_DATA_MAX) {
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <get_edge+0xc8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b32      	cmp	r3, #50	; 0x32
 80012d2:	d006      	beq.n	80012e2 <get_edge+0xba>
	for (int i = 0; i < HEIGHT; i++) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b4f      	cmp	r3, #79	; 0x4f
 80012de:	ddac      	ble.n	800123a <get_edge+0x12>
			break;
		}
	}

}
 80012e0:	e000      	b.n	80012e4 <get_edge+0xbc>
			break;
 80012e2:	bf00      	nop
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20008964 	.word	0x20008964
 80012f4:	2000710c 	.word	0x2000710c
 80012f8:	200087d4 	.word	0x200087d4
 80012fc:	2000870c 	.word	0x2000870c

08001300 <get_slope>:

float32_t get_slope() {
 8001300:	b580      	push	{r7, lr}
 8001302:	b090      	sub	sp, #64	; 0x40
 8001304:	af00      	add	r7, sp, #0
	bfs();
 8001306:	f7ff fecf 	bl	80010a8 <bfs>
	get_edge();
 800130a:	f7ff ff8d 	bl	8001228 <get_edge>
	arm_matrix_instance_f32 B;      /* Matrix B instance */
	arm_matrix_instance_f32 X;      /* Matrix X(Unknown Matrix) instance */

	arm_matrix_instance_f32 ATMAIAT;

	arm_mat_init_f32(&A, num_data, 2, (float32_t *)A_f32);
 800130e:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <get_slope+0x100>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b299      	uxth	r1, r3
 8001314:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001318:	4b3a      	ldr	r3, [pc, #232]	; (8001404 <get_slope+0x104>)
 800131a:	2202      	movs	r2, #2
 800131c:	f001 fa4a 	bl	80027b4 <arm_mat_init_f32>

	arm_mat_init_f32(&AT, 2, num_data, AT_f32);
 8001320:	4b37      	ldr	r3, [pc, #220]	; (8001400 <get_slope+0x100>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29a      	uxth	r2, r3
 8001326:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800132a:	4b37      	ldr	r3, [pc, #220]	; (8001408 <get_slope+0x108>)
 800132c:	2102      	movs	r1, #2
 800132e:	f001 fa41 	bl	80027b4 <arm_mat_init_f32>
	status = arm_mat_trans_f32(&A, &AT);
 8001332:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800133a:	4611      	mov	r1, r2
 800133c:	4618      	mov	r0, r3
 800133e:	f001 f837 	bl	80023b0 <arm_mat_trans_f32>
 8001342:	4603      	mov	r3, r0
 8001344:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	arm_mat_init_f32(&ATMA, 2, 2, ATMA_f32);
 8001348:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <get_slope+0x10c>)
 800134e:	2202      	movs	r2, #2
 8001350:	2102      	movs	r1, #2
 8001352:	f001 fa2f 	bl	80027b4 <arm_mat_init_f32>
	status = arm_mat_mult_f32(&AT, &A, &ATMA);
 8001356:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800135a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	4618      	mov	r0, r3
 8001364:	f001 f880 	bl	8002468 <arm_mat_mult_f32>
 8001368:	4603      	mov	r3, r0
 800136a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	arm_mat_init_f32(&ATMAI, 2, 2, ATMAI_f32);
 800136e:	f107 001c 	add.w	r0, r7, #28
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <get_slope+0x110>)
 8001374:	2202      	movs	r2, #2
 8001376:	2102      	movs	r1, #2
 8001378:	f001 fa1c 	bl	80027b4 <arm_mat_init_f32>
	status = arm_mat_inverse_f32(&ATMA, &ATMAI);
 800137c:	f107 021c 	add.w	r2, r7, #28
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f90e 	bl	80025a8 <arm_mat_inverse_f32>
 800138c:	4603      	mov	r3, r0
 800138e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	arm_mat_init_f32(&ATMAIAT, 2, num_data, ATMAIAT_f32);
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <get_slope+0x100>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29a      	uxth	r2, r3
 8001398:	1d38      	adds	r0, r7, #4
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <get_slope+0x114>)
 800139c:	2102      	movs	r1, #2
 800139e:	f001 fa09 	bl	80027b4 <arm_mat_init_f32>
	status = arm_mat_mult_f32(&ATMAI, &AT, &ATMAIAT);
 80013a2:	1d3a      	adds	r2, r7, #4
 80013a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4618      	mov	r0, r3
 80013ae:	f001 f85b 	bl	8002468 <arm_mat_mult_f32>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	arm_mat_init_f32(&B, num_data, 1, (float32_t *)B_f32);
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <get_slope+0x100>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b299      	uxth	r1, r3
 80013be:	f107 0014 	add.w	r0, r7, #20
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <get_slope+0x118>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	f001 f9f5 	bl	80027b4 <arm_mat_init_f32>

	arm_mat_init_f32(&X, 2, 1, X_f32);
 80013ca:	f107 000c 	add.w	r0, r7, #12
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <get_slope+0x11c>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	2102      	movs	r1, #2
 80013d4:	f001 f9ee 	bl	80027b4 <arm_mat_init_f32>

	status = arm_mat_mult_f32(&ATMAIAT, &B, &X);
 80013d8:	f107 020c 	add.w	r2, r7, #12
 80013dc:	f107 0114 	add.w	r1, r7, #20
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 f840 	bl	8002468 <arm_mat_mult_f32>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	return X_f32[0];
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <get_slope+0x11c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	ee07 3a90 	vmov	s15, r3
}
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	3740      	adds	r7, #64	; 0x40
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20008964 	.word	0x20008964
 8001404:	200087d4 	.word	0x200087d4
 8001408:	200083cc 	.word	0x200083cc
 800140c:	2000855c 	.word	0x2000855c
 8001410:	2000856c 	.word	0x2000856c
 8001414:	2000857c 	.word	0x2000857c
 8001418:	2000870c 	.word	0x2000870c
 800141c:	20008968 	.word	0x20008968

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001426:	f000 f93d 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f847 	bl	80014bc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < HEIGHT; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	e031      	b.n	8001498 <main+0x78>
	  for (int j = 0; j < WIDTH; j++) {
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	e028      	b.n	800148c <main+0x6c>
	  	  for (int k = 0; k < CHANNELS; k++) {
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e01f      	b.n	8001480 <main+0x60>
	  		data[i][j][k] = img[i][j][k];
 8001440:	481b      	ldr	r0, [pc, #108]	; (80014b0 <main+0x90>)
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	68f9      	ldr	r1, [r7, #12]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	22b4      	movs	r2, #180	; 0xb4
 800144e:	fb01 f202 	mul.w	r2, r1, r2
 8001452:	4413      	add	r3, r2
 8001454:	18c2      	adds	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	781c      	ldrb	r4, [r3, #0]
 800145c:	4815      	ldr	r0, [pc, #84]	; (80014b4 <main+0x94>)
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	22b4      	movs	r2, #180	; 0xb4
 800146a:	fb01 f202 	mul.w	r2, r1, r2
 800146e:	4413      	add	r3, r2
 8001470:	18c2      	adds	r2, r0, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4622      	mov	r2, r4
 8001478:	701a      	strb	r2, [r3, #0]
	  	  for (int k = 0; k < CHANNELS; k++) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3301      	adds	r3, #1
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	dddc      	ble.n	8001440 <main+0x20>
	  for (int j = 0; j < WIDTH; j++) {
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	3301      	adds	r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b3b      	cmp	r3, #59	; 0x3b
 8001490:	ddd3      	ble.n	800143a <main+0x1a>
  for (int i = 0; i < HEIGHT; i++) {
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3301      	adds	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b4f      	cmp	r3, #79	; 0x4f
 800149c:	ddca      	ble.n	8001434 <main+0x14>
	  	  }
	  }
  }
  test = get_slope();
 800149e:	f7ff ff2f 	bl	8001300 <get_slope>
 80014a2:	eef0 7a40 	vmov.f32	s15, s0
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <main+0x98>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <main+0x8c>
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000
 80014b4:	200038cc 	.word	0x200038cc
 80014b8:	20011f78 	.word	0x20011f78

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	2234      	movs	r2, #52	; 0x34
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 f976 	bl	80027bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <SystemClock_Config+0xb8>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a22      	ldr	r2, [pc, #136]	; (8001574 <SystemClock_Config+0xb8>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b20      	ldr	r3, [pc, #128]	; (8001574 <SystemClock_Config+0xb8>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014fc:	2300      	movs	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <SystemClock_Config+0xbc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <SystemClock_Config+0xbc>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <SystemClock_Config+0xbc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fc9f 	bl	8001e74 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800153c:	f000 f81e 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f9fa 	bl	8001954 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001566:	f000 f809 	bl	800157c <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	e7fe      	b.n	8001584 <Error_Handler+0x8>
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x4c>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x4c>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f890 	bl	8001748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	; (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001654:	f7ff ffea 	bl	800162c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800167e:	f001 f8ab 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fecd 	bl	8001420 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	200038b0 	.word	0x200038b0
  ldr r2, =_sidata
 8001694:	08003728 	.word	0x08003728
  ldr r2, =_sbss
 8001698:	200038b0 	.word	0x200038b0
  ldr r4, =_ebss
 800169c:	200120b8 	.word	0x200120b8

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f90d 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f808 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff ff56 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_InitTick+0x54>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x58>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f917 	bl	800193a <HAL_SYSTICK_Config>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e00e      	b.n	8001734 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d80a      	bhi.n	8001732 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171c:	2200      	movs	r2, #0
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f000 f8ed 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001728:	4a06      	ldr	r2, [pc, #24]	; (8001744 <HAL_InitTick+0x5c>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20003840 	.word	0x20003840
 8001740:	20003848 	.word	0x20003848
 8001744:	20003844 	.word	0x20003844

08001748 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_IncTick+0x20>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x24>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_IncTick+0x24>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20003848 	.word	0x20003848
 800176c:	20011f7c 	.word	0x20011f7c

08001770 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return uwTick;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_GetTick+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20011f7c 	.word	0x20011f7c

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff47 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff5c 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffb0 	bl	80018a8 <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cc      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d90c      	bls.n	8001990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d044      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e067      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4934      	ldr	r1, [pc, #208]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff fe94 	bl	8001770 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff fe90 	bl	8001770 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d20c      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fdf4 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080036d8 	.word	0x080036d8
 8001b18:	20003840 	.word	0x20003840
 8001b1c:	20003844 	.word	0x20003844

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b0a6      	sub	sp, #152	; 0x98
 8001b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b46:	4bc8      	ldr	r3, [pc, #800]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	f200 817e 	bhi.w	8001e50 <HAL_RCC_GetSysClockFreq+0x330>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b91 	.word	0x08001b91
 8001b60:	08001e51 	.word	0x08001e51
 8001b64:	08001e51 	.word	0x08001e51
 8001b68:	08001e51 	.word	0x08001e51
 8001b6c:	08001b99 	.word	0x08001b99
 8001b70:	08001e51 	.word	0x08001e51
 8001b74:	08001e51 	.word	0x08001e51
 8001b78:	08001e51 	.word	0x08001e51
 8001b7c:	08001ba1 	.word	0x08001ba1
 8001b80:	08001e51 	.word	0x08001e51
 8001b84:	08001e51 	.word	0x08001e51
 8001b88:	08001e51 	.word	0x08001e51
 8001b8c:	08001d0b 	.word	0x08001d0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4bb6      	ldr	r3, [pc, #728]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001b96:	e15f      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4bb5      	ldr	r3, [pc, #724]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b9e:	e15b      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ba0:	4bb1      	ldr	r3, [pc, #708]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bac:	4bae      	ldr	r3, [pc, #696]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d031      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb8:	4bab      	ldr	r3, [pc, #684]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	663b      	str	r3, [r7, #96]	; 0x60
 8001bcc:	2300      	movs	r3, #0
 8001bce:	667b      	str	r3, [r7, #100]	; 0x64
 8001bd0:	4ba7      	ldr	r3, [pc, #668]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001bd2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bd6:	462a      	mov	r2, r5
 8001bd8:	fb03 f202 	mul.w	r2, r3, r2
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4621      	mov	r1, r4
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	4aa2      	ldr	r2, [pc, #648]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001be8:	4621      	mov	r1, r4
 8001bea:	fba1 1202 	umull	r1, r2, r1, r2
 8001bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	67ba      	str	r2, [r7, #120]	; 0x78
 8001bf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001c0c:	f7fe ffb8 	bl	8000b80 <__aeabi_uldivmod>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4613      	mov	r3, r2
 8001c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001c1a:	e064      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	2200      	movs	r2, #0
 8001c24:	653b      	str	r3, [r7, #80]	; 0x50
 8001c26:	657a      	str	r2, [r7, #84]	; 0x54
 8001c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c30:	2300      	movs	r3, #0
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001c38:	4622      	mov	r2, r4
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	0159      	lsls	r1, r3, #5
 8001c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4a:	0150      	lsls	r0, r2, #5
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4621      	mov	r1, r4
 8001c52:	1a51      	subs	r1, r2, r1
 8001c54:	6139      	str	r1, [r7, #16]
 8001c56:	4629      	mov	r1, r5
 8001c58:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c6a:	4659      	mov	r1, fp
 8001c6c:	018b      	lsls	r3, r1, #6
 8001c6e:	4651      	mov	r1, sl
 8001c70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c74:	4651      	mov	r1, sl
 8001c76:	018a      	lsls	r2, r1, #6
 8001c78:	4651      	mov	r1, sl
 8001c7a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c7e:	4659      	mov	r1, fp
 8001c80:	eb63 0901 	sbc.w	r9, r3, r1
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c98:	4690      	mov	r8, r2
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	eb18 0303 	adds.w	r3, r8, r3
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	eb49 0303 	adc.w	r3, r9, r3
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	028b      	lsls	r3, r1, #10
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	028a      	lsls	r2, r1, #10
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cce:	2200      	movs	r2, #0
 8001cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8001cd2:	647a      	str	r2, [r7, #68]	; 0x44
 8001cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001cd8:	f7fe ff52 	bl	8000b80 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce6:	4b60      	ldr	r3, [pc, #384]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0c1b      	lsrs	r3, r3, #16
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001cf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001d08:	e0a6      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d0a:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d16:	4b54      	ldr	r3, [pc, #336]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d02a      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d22:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	099b      	lsrs	r3, r3, #6
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d34:	2100      	movs	r1, #0
 8001d36:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d38:	fb03 f201 	mul.w	r2, r3, r1
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	fb00 f303 	mul.w	r3, r0, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	4a4a      	ldr	r2, [pc, #296]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8001d46:	fba0 1202 	umull	r1, r2, r0, r2
 8001d4a:	677a      	str	r2, [r7, #116]	; 0x74
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	673a      	str	r2, [r7, #112]	; 0x70
 8001d50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d52:	4413      	add	r3, r2
 8001d54:	677b      	str	r3, [r7, #116]	; 0x74
 8001d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5e:	637a      	str	r2, [r7, #52]	; 0x34
 8001d60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001d68:	f7fe ff0a 	bl	8000b80 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4613      	mov	r3, r2
 8001d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d76:	e05b      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d78:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d94:	4642      	mov	r2, r8
 8001d96:	464b      	mov	r3, r9
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	0159      	lsls	r1, r3, #5
 8001da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da6:	0150      	lsls	r0, r2, #5
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4641      	mov	r1, r8
 8001dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001db2:	4649      	mov	r1, r9
 8001db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8001dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	00eb      	lsls	r3, r5, #3
 8001dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001de2:	00e2      	lsls	r2, r4, #3
 8001de4:	4614      	mov	r4, r2
 8001de6:	461d      	mov	r5, r3
 8001de8:	4643      	mov	r3, r8
 8001dea:	18e3      	adds	r3, r4, r3
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	464b      	mov	r3, r9
 8001df0:	eb45 0303 	adc.w	r3, r5, r3
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e02:	4629      	mov	r1, r5
 8001e04:	028b      	lsls	r3, r1, #10
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	028a      	lsls	r2, r1, #10
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	61fa      	str	r2, [r7, #28]
 8001e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e22:	f7fe fead 	bl	8000b80 <__aeabi_uldivmod>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	0f1b      	lsrs	r3, r3, #28
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e4e:	e003      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001e56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3798      	adds	r7, #152	; 0x98
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	017d7840 	.word	0x017d7840

08001e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e28d      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8083 	beq.w	8001f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e94:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d019      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ea0:	4b91      	ldr	r3, [pc, #580]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001eac:	4b8e      	ldr	r3, [pc, #568]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b8b      	ldr	r3, [pc, #556]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d112      	bne.n	8001eec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d05b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x124>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d157      	bne.n	8001f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e25a      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d106      	bne.n	8001f04 <HAL_RCC_OscConfig+0x90>
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7b      	ldr	r2, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	e01d      	b.n	8001f40 <HAL_RCC_OscConfig+0xcc>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0xb4>
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a72      	ldr	r2, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0xcc>
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6b      	ldr	r2, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d013      	beq.n	8001f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fc12 	bl	8001770 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fc0e 	bl	8001770 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e21f      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b61      	ldr	r3, [pc, #388]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xdc>
 8001f6e:	e014      	b.n	8001f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f70:	f7ff fbfe 	bl	8001770 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f78:	f7ff fbfa 	bl	8001770 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e20b      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8a:	4b57      	ldr	r3, [pc, #348]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x104>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d06f      	beq.n	8002086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fa6:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d017      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fb2:	4b4d      	ldr	r3, [pc, #308]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d105      	bne.n	8001fca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x186>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1d3      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x278>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fba7 	bl	8001770 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fba3 	bl	8001770 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1b4      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x278>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fb86 	bl	8001770 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fb82 	bl	8001770 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e193      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d036      	beq.n	8002100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x27c>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7ff fb66 	bl	8001770 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fb62 	bl	8001770 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e173      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x274>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x234>
 80020c6:	e01b      	b.n	8002100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb4f 	bl	8001770 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e00e      	b.n	80020f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff fb4b 	bl	8001770 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d907      	bls.n	80020f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e15c      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470000 	.word	0x42470000
 80020f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ea      	bne.n	80020d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8097 	beq.w	800223c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b79      	ldr	r3, [pc, #484]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a75      	ldr	r2, [pc, #468]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7ff fb0b 	bl	8001770 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7ff fb07 	bl	8001770 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e118      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b6c      	ldr	r3, [pc, #432]	; (8002324 <HAL_RCC_OscConfig+0x4b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x31e>
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x358>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x340>
 800219a:	4b61      	ldr	r3, [pc, #388]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a60      	ldr	r2, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x358>
 80021b4:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a59      	ldr	r2, [pc, #356]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff facc 	bl	8001770 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff fac8 	bl	8001770 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0d7      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4b4b      	ldr	r3, [pc, #300]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RCC_OscConfig+0x368>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff fab6 	bl	8001770 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff fab2 	bl	8001770 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0c1      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	4b40      	ldr	r3, [pc, #256]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80ad 	beq.w	80023a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d060      	beq.n	8002314 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d145      	bne.n	80022e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_RCC_OscConfig+0x4b4>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7ff fa86 	bl	8001770 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff fa82 	bl	8001770 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e093      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x4b4>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7ff fa57 	bl	8001770 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff fa53 	bl	8001770 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e064      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x452>
 80022e4:	e05c      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_OscConfig+0x4b4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7ff fa40 	bl	8001770 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f4:	f7ff fa3c 	bl	8001770 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04d      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x4ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x480>
 8002312:	e045      	b.n	80023a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e040      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000
 8002328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800232c:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <HAL_RCC_OscConfig+0x538>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d030      	beq.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d129      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d122      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002364:	4293      	cmp	r3, r2
 8002366:	d119      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	085b      	lsrs	r3, r3, #1
 8002374:	3b01      	subs	r3, #1
 8002376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d10f      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <arm_mat_trans_f32>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	8802      	ldrh	r2, [r0, #0]
 80023b6:	884b      	ldrh	r3, [r1, #2]
 80023b8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80023bc:	684f      	ldr	r7, [r1, #4]
 80023be:	8840      	ldrh	r0, [r0, #2]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	b083      	sub	sp, #12
 80023c4:	d14c      	bne.n	8002460 <arm_mat_trans_f32+0xb0>
 80023c6:	f8b1 e000 	ldrh.w	lr, [r1]
 80023ca:	4586      	cmp	lr, r0
 80023cc:	d148      	bne.n	8002460 <arm_mat_trans_f32+0xb0>
 80023ce:	ea4f 089e 	mov.w	r8, lr, lsr #2
 80023d2:	009c      	lsls	r4, r3, #2
 80023d4:	f00e 0e03 	and.w	lr, lr, #3
 80023d8:	fb08 f904 	mul.w	r9, r8, r4
 80023dc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80023e0:	011d      	lsls	r5, r3, #4
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80023e8:	eb07 0a04 	add.w	sl, r7, r4
 80023ec:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 80023f0:	9201      	str	r2, [sp, #4]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	463b      	mov	r3, r7
 80023f6:	f1b8 0f00 	cmp.w	r8, #0
 80023fa:	d01d      	beq.n	8002438 <arm_mat_trans_f32+0x88>
 80023fc:	9900      	ldr	r1, [sp, #0]
 80023fe:	f10c 0210 	add.w	r2, ip, #16
 8002402:	4439      	add	r1, r7
 8002404:	4640      	mov	r0, r8
 8002406:	f852 6c10 	ldr.w	r6, [r2, #-16]
 800240a:	601e      	str	r6, [r3, #0]
 800240c:	ed52 7a03 	vldr	s15, [r2, #-12]
 8002410:	191e      	adds	r6, r3, r4
 8002412:	edc6 7a00 	vstr	s15, [r6]
 8002416:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800241a:	600e      	str	r6, [r1, #0]
 800241c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8002420:	190e      	adds	r6, r1, r4
 8002422:	3801      	subs	r0, #1
 8002424:	442b      	add	r3, r5
 8002426:	f102 0210 	add.w	r2, r2, #16
 800242a:	edc6 7a00 	vstr	s15, [r6]
 800242e:	4429      	add	r1, r5
 8002430:	d1e9      	bne.n	8002406 <arm_mat_trans_f32+0x56>
 8002432:	44dc      	add	ip, fp
 8002434:	eb09 0307 	add.w	r3, r9, r7
 8002438:	f1be 0f00 	cmp.w	lr, #0
 800243c:	d009      	beq.n	8002452 <arm_mat_trans_f32+0xa2>
 800243e:	4672      	mov	r2, lr
 8002440:	4661      	mov	r1, ip
 8002442:	f851 0b04 	ldr.w	r0, [r1], #4
 8002446:	6018      	str	r0, [r3, #0]
 8002448:	3a01      	subs	r2, #1
 800244a:	4423      	add	r3, r4
 800244c:	d1f9      	bne.n	8002442 <arm_mat_trans_f32+0x92>
 800244e:	9b01      	ldr	r3, [sp, #4]
 8002450:	449c      	add	ip, r3
 8002452:	3704      	adds	r7, #4
 8002454:	4557      	cmp	r7, sl
 8002456:	d1cd      	bne.n	80023f4 <arm_mat_trans_f32+0x44>
 8002458:	2000      	movs	r0, #0
 800245a:	b003      	add	sp, #12
 800245c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002460:	f06f 0002 	mvn.w	r0, #2
 8002464:	e7f9      	b.n	800245a <arm_mat_trans_f32+0xaa>
 8002466:	bf00      	nop

08002468 <arm_mat_mult_f32>:
 8002468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800246c:	8845      	ldrh	r5, [r0, #2]
 800246e:	880b      	ldrh	r3, [r1, #0]
 8002470:	8806      	ldrh	r6, [r0, #0]
 8002472:	6847      	ldr	r7, [r0, #4]
 8002474:	6854      	ldr	r4, [r2, #4]
 8002476:	6848      	ldr	r0, [r1, #4]
 8002478:	b08b      	sub	sp, #44	; 0x2c
 800247a:	42ab      	cmp	r3, r5
 800247c:	9109      	str	r1, [sp, #36]	; 0x24
 800247e:	9604      	str	r6, [sp, #16]
 8002480:	8849      	ldrh	r1, [r1, #2]
 8002482:	f040 808a 	bne.w	800259a <arm_mat_mult_f32+0x132>
 8002486:	8815      	ldrh	r5, [r2, #0]
 8002488:	42b5      	cmp	r5, r6
 800248a:	f040 8086 	bne.w	800259a <arm_mat_mult_f32+0x132>
 800248e:	8852      	ldrh	r2, [r2, #2]
 8002490:	428a      	cmp	r2, r1
 8002492:	f040 8082 	bne.w	800259a <arm_mat_mult_f32+0x132>
 8002496:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800249a:	1d01      	adds	r1, r0, #4
 800249c:	0116      	lsls	r6, r2, #4
 800249e:	9108      	str	r1, [sp, #32]
 80024a0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 80024a4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 80024a8:	9101      	str	r1, [sp, #4]
 80024aa:	fb06 f108 	mul.w	r1, r6, r8
 80024ae:	0095      	lsls	r5, r2, #2
 80024b0:	9103      	str	r1, [sp, #12]
 80024b2:	00d2      	lsls	r2, r2, #3
 80024b4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80024b8:	f003 0903 	and.w	r9, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	f107 0b10 	add.w	fp, r7, #16
 80024c2:	eb04 0a05 	add.w	sl, r4, r5
 80024c6:	9107      	str	r1, [sp, #28]
 80024c8:	9202      	str	r2, [sp, #8]
 80024ca:	9306      	str	r3, [sp, #24]
 80024cc:	f1ab 0310 	sub.w	r3, fp, #16
 80024d0:	9305      	str	r3, [sp, #20]
 80024d2:	9b07      	ldr	r3, [sp, #28]
 80024d4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80024d8:	eb03 0c0a 	add.w	ip, r3, sl
 80024dc:	eddf 7a31 	vldr	s15, [pc, #196]	; 80025a4 <arm_mat_mult_f32+0x13c>
 80024e0:	f1b8 0f00 	cmp.w	r8, #0
 80024e4:	d053      	beq.n	800258e <arm_mat_mult_f32+0x126>
 80024e6:	9b02      	ldr	r3, [sp, #8]
 80024e8:	4644      	mov	r4, r8
 80024ea:	18c1      	adds	r1, r0, r3
 80024ec:	4602      	mov	r2, r0
 80024ee:	465b      	mov	r3, fp
 80024f0:	ed92 6a00 	vldr	s12, [r2]
 80024f4:	ed13 7a04 	vldr	s14, [r3, #-16]
 80024f8:	ed53 4a03 	vldr	s9, [r3, #-12]
 80024fc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8002500:	ed91 5a00 	vldr	s10, [r1]
 8002504:	ed53 5a01 	vldr	s11, [r3, #-4]
 8002508:	1957      	adds	r7, r2, r5
 800250a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800250e:	ed97 6a00 	vldr	s12, [r7]
 8002512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002516:	ee26 6a24 	vmul.f32	s12, s12, s9
 800251a:	194f      	adds	r7, r1, r5
 800251c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002520:	ee26 7a85 	vmul.f32	s14, s13, s10
 8002524:	edd7 7a00 	vldr	s15, [r7]
 8002528:	ee37 7a06 	vadd.f32	s14, s14, s12
 800252c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002530:	3c01      	subs	r4, #1
 8002532:	4432      	add	r2, r6
 8002534:	4431      	add	r1, r6
 8002536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800253a:	f103 0310 	add.w	r3, r3, #16
 800253e:	d1d7      	bne.n	80024f0 <arm_mat_mult_f32+0x88>
 8002540:	9b03      	ldr	r3, [sp, #12]
 8002542:	9a01      	ldr	r2, [sp, #4]
 8002544:	4418      	add	r0, r3
 8002546:	f1b9 0f00 	cmp.w	r9, #0
 800254a:	d00b      	beq.n	8002564 <arm_mat_mult_f32+0xfc>
 800254c:	464b      	mov	r3, r9
 800254e:	edd0 6a00 	vldr	s13, [r0]
 8002552:	ecb2 7a01 	vldmia	r2!, {s14}
 8002556:	ee27 7a26 	vmul.f32	s14, s14, s13
 800255a:	3b01      	subs	r3, #1
 800255c:	4428      	add	r0, r5
 800255e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002562:	d1f4      	bne.n	800254e <arm_mat_mult_f32+0xe6>
 8002564:	ecec 7a01 	vstmia	ip!, {s15}
 8002568:	45d4      	cmp	ip, sl
 800256a:	4670      	mov	r0, lr
 800256c:	f10e 0e04 	add.w	lr, lr, #4
 8002570:	d1b4      	bne.n	80024dc <arm_mat_mult_f32+0x74>
 8002572:	9a01      	ldr	r2, [sp, #4]
 8002574:	9b06      	ldr	r3, [sp, #24]
 8002576:	4611      	mov	r1, r2
 8002578:	4419      	add	r1, r3
 800257a:	449b      	add	fp, r3
 800257c:	9b04      	ldr	r3, [sp, #16]
 800257e:	9101      	str	r1, [sp, #4]
 8002580:	3b01      	subs	r3, #1
 8002582:	44aa      	add	sl, r5
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	d004      	beq.n	8002592 <arm_mat_mult_f32+0x12a>
 8002588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800258a:	6858      	ldr	r0, [r3, #4]
 800258c:	e79e      	b.n	80024cc <arm_mat_mult_f32+0x64>
 800258e:	9a05      	ldr	r2, [sp, #20]
 8002590:	e7d9      	b.n	8002546 <arm_mat_mult_f32+0xde>
 8002592:	4618      	mov	r0, r3
 8002594:	b00b      	add	sp, #44	; 0x2c
 8002596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800259a:	f06f 0002 	mvn.w	r0, #2
 800259e:	b00b      	add	sp, #44	; 0x2c
 80025a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a4:	00000000 	.word	0x00000000

080025a8 <arm_mat_inverse_f32>:
 80025a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ac:	8843      	ldrh	r3, [r0, #2]
 80025ae:	8804      	ldrh	r4, [r0, #0]
 80025b0:	684e      	ldr	r6, [r1, #4]
 80025b2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80025b6:	b087      	sub	sp, #28
 80025b8:	429c      	cmp	r4, r3
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	9603      	str	r6, [sp, #12]
 80025be:	f040 80ea 	bne.w	8002796 <arm_mat_inverse_f32+0x1ee>
 80025c2:	880a      	ldrh	r2, [r1, #0]
 80025c4:	884b      	ldrh	r3, [r1, #2]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 80e5 	bne.w	8002796 <arm_mat_inverse_f32+0x1ee>
 80025cc:	429c      	cmp	r4, r3
 80025ce:	f040 80e2 	bne.w	8002796 <arm_mat_inverse_f32+0x1ee>
 80025d2:	9005      	str	r0, [sp, #20]
 80025d4:	b30c      	cbz	r4, 800261a <arm_mat_inverse_f32+0x72>
 80025d6:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 80025da:	1e67      	subs	r7, r4, #1
 80025dc:	f846 bb04 	str.w	fp, [r6], #4
 80025e0:	d01b      	beq.n	800261a <arm_mat_inverse_f32+0x72>
 80025e2:	f04f 0801 	mov.w	r8, #1
 80025e6:	00ba      	lsls	r2, r7, #2
 80025e8:	eb06 0a02 	add.w	sl, r6, r2
 80025ec:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80025f0:	4630      	mov	r0, r6
 80025f2:	2100      	movs	r1, #0
 80025f4:	f000 f8e2 	bl	80027bc <memset>
 80025f8:	eb0a 0605 	add.w	r6, sl, r5
 80025fc:	462a      	mov	r2, r5
 80025fe:	2100      	movs	r1, #0
 8002600:	4650      	mov	r0, sl
 8002602:	f1b8 0f00 	cmp.w	r8, #0
 8002606:	f000 80cb 	beq.w	80027a0 <arm_mat_inverse_f32+0x1f8>
 800260a:	f000 f8d7 	bl	80027bc <memset>
 800260e:	3f01      	subs	r7, #1
 8002610:	f108 0801 	add.w	r8, r8, #1
 8002614:	f846 bb04 	str.w	fp, [r6], #4
 8002618:	d1e5      	bne.n	80025e6 <arm_mat_inverse_f32+0x3e>
 800261a:	9b01      	ldr	r3, [sp, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80b5 	beq.w	800278c <arm_mat_inverse_f32+0x1e4>
 8002622:	009d      	lsls	r5, r3, #2
 8002624:	eb09 0205 	add.w	r2, r9, r5
 8002628:	46cc      	mov	ip, r9
 800262a:	9202      	str	r2, [sp, #8]
 800262c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002630:	1d2a      	adds	r2, r5, #4
 8002632:	9204      	str	r2, [sp, #16]
 8002634:	462f      	mov	r7, r5
 8002636:	469e      	mov	lr, r3
 8002638:	2600      	movs	r6, #0
 800263a:	9b02      	ldr	r3, [sp, #8]
 800263c:	eddc 6a00 	vldr	s13, [ip]
 8002640:	42b4      	cmp	r4, r6
 8002642:	eba3 0b07 	sub.w	fp, r3, r7
 8002646:	f000 80a1 	beq.w	800278c <arm_mat_inverse_f32+0x1e4>
 800264a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80027b0 <arm_mat_inverse_f32+0x208>
 800264e:	4632      	mov	r2, r6
 8002650:	4663      	mov	r3, ip
 8002652:	e00b      	b.n	800266c <arm_mat_inverse_f32+0xc4>
 8002654:	eef4 7a47 	vcmp.f32	s15, s14
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	f102 0201 	add.w	r2, r2, #1
 8002660:	bfc8      	it	gt
 8002662:	eeb0 7a67 	vmovgt.f32	s14, s15
 8002666:	42a2      	cmp	r2, r4
 8002668:	442b      	add	r3, r5
 800266a:	d014      	beq.n	8002696 <arm_mat_inverse_f32+0xee>
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	eeb1 6a67 	vneg.f32	s12, s15
 800267c:	dcea      	bgt.n	8002654 <arm_mat_inverse_f32+0xac>
 800267e:	eeb4 6a47 	vcmp.f32	s12, s14
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	f102 0201 	add.w	r2, r2, #1
 800268a:	bfc8      	it	gt
 800268c:	eeb0 7a46 	vmovgt.f32	s14, s12
 8002690:	42a2      	cmp	r2, r4
 8002692:	442b      	add	r3, r5
 8002694:	d1ea      	bne.n	800266c <arm_mat_inverse_f32+0xc4>
 8002696:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	d075      	beq.n	800278c <arm_mat_inverse_f32+0x1e4>
 80026a0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	d070      	beq.n	800278c <arm_mat_inverse_f32+0x1e4>
 80026aa:	4672      	mov	r2, lr
 80026ac:	4663      	mov	r3, ip
 80026ae:	ed93 7a00 	vldr	s14, [r3]
 80026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b6:	3a01      	subs	r2, #1
 80026b8:	ece3 7a01 	vstmia	r3!, {s15}
 80026bc:	d1f7      	bne.n	80026ae <arm_mat_inverse_f32+0x106>
 80026be:	9901      	ldr	r1, [sp, #4]
 80026c0:	464b      	mov	r3, r9
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ca:	3901      	subs	r1, #1
 80026cc:	ece3 7a01 	vstmia	r3!, {s15}
 80026d0:	d1f7      	bne.n	80026c2 <arm_mat_inverse_f32+0x11a>
 80026d2:	9803      	ldr	r0, [sp, #12]
 80026d4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80026d8:	42b1      	cmp	r1, r6
 80026da:	d039      	beq.n	8002750 <arm_mat_inverse_f32+0x1a8>
 80026dc:	eddb 6a00 	vldr	s13, [fp]
 80026e0:	465a      	mov	r2, fp
 80026e2:	4673      	mov	r3, lr
 80026e4:	46e2      	mov	sl, ip
 80026e6:	ecba 7a01 	vldmia	sl!, {s14}
 80026ea:	edd2 7a00 	vldr	s15, [r2]
 80026ee:	ee26 7a87 	vmul.f32	s14, s13, s14
 80026f2:	3b01      	subs	r3, #1
 80026f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026f8:	ece2 7a01 	vstmia	r2!, {s15}
 80026fc:	d1f3      	bne.n	80026e6 <arm_mat_inverse_f32+0x13e>
 80026fe:	9b01      	ldr	r3, [sp, #4]
 8002700:	44bb      	add	fp, r7
 8002702:	4602      	mov	r2, r0
 8002704:	46ca      	mov	sl, r9
 8002706:	ecba 7a01 	vldmia	sl!, {s14}
 800270a:	edd2 7a00 	vldr	s15, [r2]
 800270e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002712:	3b01      	subs	r3, #1
 8002714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002718:	ece2 7a01 	vstmia	r2!, {s15}
 800271c:	d1f3      	bne.n	8002706 <arm_mat_inverse_f32+0x15e>
 800271e:	4428      	add	r0, r5
 8002720:	3101      	adds	r1, #1
 8002722:	428c      	cmp	r4, r1
 8002724:	44c3      	add	fp, r8
 8002726:	d1d7      	bne.n	80026d8 <arm_mat_inverse_f32+0x130>
 8002728:	9b04      	ldr	r3, [sp, #16]
 800272a:	f1be 0e01 	subs.w	lr, lr, #1
 800272e:	f106 0601 	add.w	r6, r6, #1
 8002732:	449c      	add	ip, r3
 8002734:	f1a7 0704 	sub.w	r7, r7, #4
 8002738:	44a9      	add	r9, r5
 800273a:	f47f af7e 	bne.w	800263a <arm_mat_inverse_f32+0x92>
 800273e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	d006      	beq.n	8002756 <arm_mat_inverse_f32+0x1ae>
 8002748:	2000      	movs	r0, #0
 800274a:	b007      	add	sp, #28
 800274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002750:	44bb      	add	fp, r7
 8002752:	4428      	add	r0, r5
 8002754:	e7e4      	b.n	8002720 <arm_mat_inverse_f32+0x178>
 8002756:	9b05      	ldr	r3, [sp, #20]
 8002758:	9a01      	ldr	r2, [sp, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002764:	fb02 f204 	mul.w	r2, r2, r4
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	4614      	mov	r4, r2
 800276e:	bf08      	it	eq
 8002770:	3304      	addeq	r3, #4
 8002772:	d007      	beq.n	8002784 <arm_mat_inverse_f32+0x1dc>
 8002774:	e7e8      	b.n	8002748 <arm_mat_inverse_f32+0x1a0>
 8002776:	ecf3 7a01 	vldmia	r3!, {s15}
 800277a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	d1e1      	bne.n	8002748 <arm_mat_inverse_f32+0x1a0>
 8002784:	f10e 0e01 	add.w	lr, lr, #1
 8002788:	4574      	cmp	r4, lr
 800278a:	d1f4      	bne.n	8002776 <arm_mat_inverse_f32+0x1ce>
 800278c:	f06f 0004 	mvn.w	r0, #4
 8002790:	b007      	add	sp, #28
 8002792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002796:	f06f 0002 	mvn.w	r0, #2
 800279a:	b007      	add	sp, #28
 800279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027a0:	4656      	mov	r6, sl
 80027a2:	3f01      	subs	r7, #1
 80027a4:	f846 bb04 	str.w	fp, [r6], #4
 80027a8:	f47f af1b 	bne.w	80025e2 <arm_mat_inverse_f32+0x3a>
 80027ac:	e735      	b.n	800261a <arm_mat_inverse_f32+0x72>
 80027ae:	bf00      	nop
 80027b0:	00000000 	.word	0x00000000

080027b4 <arm_mat_init_f32>:
 80027b4:	8001      	strh	r1, [r0, #0]
 80027b6:	8042      	strh	r2, [r0, #2]
 80027b8:	6043      	str	r3, [r0, #4]
 80027ba:	4770      	bx	lr

080027bc <memset>:
 80027bc:	4402      	add	r2, r0
 80027be:	4603      	mov	r3, r0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d100      	bne.n	80027c6 <memset+0xa>
 80027c4:	4770      	bx	lr
 80027c6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ca:	e7f9      	b.n	80027c0 <memset+0x4>

080027cc <__errno>:
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <__errno+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20003898 	.word	0x20003898

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4d0d      	ldr	r5, [pc, #52]	; (8002810 <__libc_init_array+0x38>)
 80027dc:	4c0d      	ldr	r4, [pc, #52]	; (8002814 <__libc_init_array+0x3c>)
 80027de:	1b64      	subs	r4, r4, r5
 80027e0:	10a4      	asrs	r4, r4, #2
 80027e2:	2600      	movs	r6, #0
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	4d0b      	ldr	r5, [pc, #44]	; (8002818 <__libc_init_array+0x40>)
 80027ea:	4c0c      	ldr	r4, [pc, #48]	; (800281c <__libc_init_array+0x44>)
 80027ec:	f000 ff50 	bl	8003690 <_init>
 80027f0:	1b64      	subs	r4, r4, r5
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	2600      	movs	r6, #0
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	08003720 	.word	0x08003720
 8002814:	08003720 	.word	0x08003720
 8002818:	08003720 	.word	0x08003720
 800281c:	08003724 	.word	0x08003724

08002820 <pow>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	ed2d 8b02 	vpush	{d8}
 8002826:	eeb0 8a40 	vmov.f32	s16, s0
 800282a:	eef0 8a60 	vmov.f32	s17, s1
 800282e:	ec55 4b11 	vmov	r4, r5, d1
 8002832:	f000 f871 	bl	8002918 <__ieee754_pow>
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	ec57 6b10 	vmov	r6, r7, d0
 8002842:	f7fe f937 	bl	8000ab4 <__aeabi_dcmpun>
 8002846:	2800      	cmp	r0, #0
 8002848:	d13b      	bne.n	80028c2 <pow+0xa2>
 800284a:	ec51 0b18 	vmov	r0, r1, d8
 800284e:	2200      	movs	r2, #0
 8002850:	2300      	movs	r3, #0
 8002852:	f7fe f8fd 	bl	8000a50 <__aeabi_dcmpeq>
 8002856:	b1b8      	cbz	r0, 8002888 <pow+0x68>
 8002858:	2200      	movs	r2, #0
 800285a:	2300      	movs	r3, #0
 800285c:	4620      	mov	r0, r4
 800285e:	4629      	mov	r1, r5
 8002860:	f7fe f8f6 	bl	8000a50 <__aeabi_dcmpeq>
 8002864:	2800      	cmp	r0, #0
 8002866:	d146      	bne.n	80028f6 <pow+0xd6>
 8002868:	ec45 4b10 	vmov	d0, r4, r5
 800286c:	f000 f848 	bl	8002900 <finite>
 8002870:	b338      	cbz	r0, 80028c2 <pow+0xa2>
 8002872:	2200      	movs	r2, #0
 8002874:	2300      	movs	r3, #0
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fe f8f3 	bl	8000a64 <__aeabi_dcmplt>
 800287e:	b300      	cbz	r0, 80028c2 <pow+0xa2>
 8002880:	f7ff ffa4 	bl	80027cc <__errno>
 8002884:	2322      	movs	r3, #34	; 0x22
 8002886:	e01b      	b.n	80028c0 <pow+0xa0>
 8002888:	ec47 6b10 	vmov	d0, r6, r7
 800288c:	f000 f838 	bl	8002900 <finite>
 8002890:	b9e0      	cbnz	r0, 80028cc <pow+0xac>
 8002892:	eeb0 0a48 	vmov.f32	s0, s16
 8002896:	eef0 0a68 	vmov.f32	s1, s17
 800289a:	f000 f831 	bl	8002900 <finite>
 800289e:	b1a8      	cbz	r0, 80028cc <pow+0xac>
 80028a0:	ec45 4b10 	vmov	d0, r4, r5
 80028a4:	f000 f82c 	bl	8002900 <finite>
 80028a8:	b180      	cbz	r0, 80028cc <pow+0xac>
 80028aa:	4632      	mov	r2, r6
 80028ac:	463b      	mov	r3, r7
 80028ae:	4630      	mov	r0, r6
 80028b0:	4639      	mov	r1, r7
 80028b2:	f7fe f8ff 	bl	8000ab4 <__aeabi_dcmpun>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d0e2      	beq.n	8002880 <pow+0x60>
 80028ba:	f7ff ff87 	bl	80027cc <__errno>
 80028be:	2321      	movs	r3, #33	; 0x21
 80028c0:	6003      	str	r3, [r0, #0]
 80028c2:	ecbd 8b02 	vpop	{d8}
 80028c6:	ec47 6b10 	vmov	d0, r6, r7
 80028ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028cc:	2200      	movs	r2, #0
 80028ce:	2300      	movs	r3, #0
 80028d0:	4630      	mov	r0, r6
 80028d2:	4639      	mov	r1, r7
 80028d4:	f7fe f8bc 	bl	8000a50 <__aeabi_dcmpeq>
 80028d8:	2800      	cmp	r0, #0
 80028da:	d0f2      	beq.n	80028c2 <pow+0xa2>
 80028dc:	eeb0 0a48 	vmov.f32	s0, s16
 80028e0:	eef0 0a68 	vmov.f32	s1, s17
 80028e4:	f000 f80c 	bl	8002900 <finite>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d0ea      	beq.n	80028c2 <pow+0xa2>
 80028ec:	ec45 4b10 	vmov	d0, r4, r5
 80028f0:	f000 f806 	bl	8002900 <finite>
 80028f4:	e7c3      	b.n	800287e <pow+0x5e>
 80028f6:	4f01      	ldr	r7, [pc, #4]	; (80028fc <pow+0xdc>)
 80028f8:	2600      	movs	r6, #0
 80028fa:	e7e2      	b.n	80028c2 <pow+0xa2>
 80028fc:	3ff00000 	.word	0x3ff00000

08002900 <finite>:
 8002900:	b082      	sub	sp, #8
 8002902:	ed8d 0b00 	vstr	d0, [sp]
 8002906:	9801      	ldr	r0, [sp, #4]
 8002908:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800290c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8002910:	0fc0      	lsrs	r0, r0, #31
 8002912:	b002      	add	sp, #8
 8002914:	4770      	bx	lr
	...

08002918 <__ieee754_pow>:
 8002918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800291c:	ed2d 8b06 	vpush	{d8-d10}
 8002920:	b089      	sub	sp, #36	; 0x24
 8002922:	ed8d 1b00 	vstr	d1, [sp]
 8002926:	e9dd 2900 	ldrd	r2, r9, [sp]
 800292a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800292e:	ea58 0102 	orrs.w	r1, r8, r2
 8002932:	ec57 6b10 	vmov	r6, r7, d0
 8002936:	d115      	bne.n	8002964 <__ieee754_pow+0x4c>
 8002938:	19b3      	adds	r3, r6, r6
 800293a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800293e:	4152      	adcs	r2, r2
 8002940:	4299      	cmp	r1, r3
 8002942:	4b89      	ldr	r3, [pc, #548]	; (8002b68 <__ieee754_pow+0x250>)
 8002944:	4193      	sbcs	r3, r2
 8002946:	f080 84d1 	bcs.w	80032ec <__ieee754_pow+0x9d4>
 800294a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800294e:	4630      	mov	r0, r6
 8002950:	4639      	mov	r1, r7
 8002952:	f7fd fc5f 	bl	8000214 <__adddf3>
 8002956:	ec41 0b10 	vmov	d0, r0, r1
 800295a:	b009      	add	sp, #36	; 0x24
 800295c:	ecbd 8b06 	vpop	{d8-d10}
 8002960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002964:	4b81      	ldr	r3, [pc, #516]	; (8002b6c <__ieee754_pow+0x254>)
 8002966:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800296a:	429c      	cmp	r4, r3
 800296c:	ee10 aa10 	vmov	sl, s0
 8002970:	463d      	mov	r5, r7
 8002972:	dc06      	bgt.n	8002982 <__ieee754_pow+0x6a>
 8002974:	d101      	bne.n	800297a <__ieee754_pow+0x62>
 8002976:	2e00      	cmp	r6, #0
 8002978:	d1e7      	bne.n	800294a <__ieee754_pow+0x32>
 800297a:	4598      	cmp	r8, r3
 800297c:	dc01      	bgt.n	8002982 <__ieee754_pow+0x6a>
 800297e:	d10f      	bne.n	80029a0 <__ieee754_pow+0x88>
 8002980:	b172      	cbz	r2, 80029a0 <__ieee754_pow+0x88>
 8002982:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8002986:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800298a:	ea55 050a 	orrs.w	r5, r5, sl
 800298e:	d1dc      	bne.n	800294a <__ieee754_pow+0x32>
 8002990:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002994:	18db      	adds	r3, r3, r3
 8002996:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800299a:	4152      	adcs	r2, r2
 800299c:	429d      	cmp	r5, r3
 800299e:	e7d0      	b.n	8002942 <__ieee754_pow+0x2a>
 80029a0:	2d00      	cmp	r5, #0
 80029a2:	da3b      	bge.n	8002a1c <__ieee754_pow+0x104>
 80029a4:	4b72      	ldr	r3, [pc, #456]	; (8002b70 <__ieee754_pow+0x258>)
 80029a6:	4598      	cmp	r8, r3
 80029a8:	dc51      	bgt.n	8002a4e <__ieee754_pow+0x136>
 80029aa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80029ae:	4598      	cmp	r8, r3
 80029b0:	f340 84ab 	ble.w	800330a <__ieee754_pow+0x9f2>
 80029b4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80029b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80029bc:	2b14      	cmp	r3, #20
 80029be:	dd0f      	ble.n	80029e0 <__ieee754_pow+0xc8>
 80029c0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80029c4:	fa22 f103 	lsr.w	r1, r2, r3
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f040 849c 	bne.w	800330a <__ieee754_pow+0x9f2>
 80029d2:	f001 0101 	and.w	r1, r1, #1
 80029d6:	f1c1 0302 	rsb	r3, r1, #2
 80029da:	9304      	str	r3, [sp, #16]
 80029dc:	b182      	cbz	r2, 8002a00 <__ieee754_pow+0xe8>
 80029de:	e05f      	b.n	8002aa0 <__ieee754_pow+0x188>
 80029e0:	2a00      	cmp	r2, #0
 80029e2:	d15b      	bne.n	8002a9c <__ieee754_pow+0x184>
 80029e4:	f1c3 0314 	rsb	r3, r3, #20
 80029e8:	fa48 f103 	asr.w	r1, r8, r3
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	4543      	cmp	r3, r8
 80029f2:	f040 8487 	bne.w	8003304 <__ieee754_pow+0x9ec>
 80029f6:	f001 0101 	and.w	r1, r1, #1
 80029fa:	f1c1 0302 	rsb	r3, r1, #2
 80029fe:	9304      	str	r3, [sp, #16]
 8002a00:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <__ieee754_pow+0x25c>)
 8002a02:	4598      	cmp	r8, r3
 8002a04:	d132      	bne.n	8002a6c <__ieee754_pow+0x154>
 8002a06:	f1b9 0f00 	cmp.w	r9, #0
 8002a0a:	f280 8477 	bge.w	80032fc <__ieee754_pow+0x9e4>
 8002a0e:	4959      	ldr	r1, [pc, #356]	; (8002b74 <__ieee754_pow+0x25c>)
 8002a10:	4632      	mov	r2, r6
 8002a12:	463b      	mov	r3, r7
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fd fedd 	bl	80007d4 <__aeabi_ddiv>
 8002a1a:	e79c      	b.n	8002956 <__ieee754_pow+0x3e>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d13d      	bne.n	8002aa0 <__ieee754_pow+0x188>
 8002a24:	4b51      	ldr	r3, [pc, #324]	; (8002b6c <__ieee754_pow+0x254>)
 8002a26:	4598      	cmp	r8, r3
 8002a28:	d1ea      	bne.n	8002a00 <__ieee754_pow+0xe8>
 8002a2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002a2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002a32:	ea53 030a 	orrs.w	r3, r3, sl
 8002a36:	f000 8459 	beq.w	80032ec <__ieee754_pow+0x9d4>
 8002a3a:	4b4f      	ldr	r3, [pc, #316]	; (8002b78 <__ieee754_pow+0x260>)
 8002a3c:	429c      	cmp	r4, r3
 8002a3e:	dd08      	ble.n	8002a52 <__ieee754_pow+0x13a>
 8002a40:	f1b9 0f00 	cmp.w	r9, #0
 8002a44:	f2c0 8456 	blt.w	80032f4 <__ieee754_pow+0x9dc>
 8002a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002a4c:	e783      	b.n	8002956 <__ieee754_pow+0x3e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e7e5      	b.n	8002a1e <__ieee754_pow+0x106>
 8002a52:	f1b9 0f00 	cmp.w	r9, #0
 8002a56:	f04f 0000 	mov.w	r0, #0
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	f6bf af7a 	bge.w	8002956 <__ieee754_pow+0x3e>
 8002a62:	e9dd 0300 	ldrd	r0, r3, [sp]
 8002a66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002a6a:	e774      	b.n	8002956 <__ieee754_pow+0x3e>
 8002a6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8002a70:	d106      	bne.n	8002a80 <__ieee754_pow+0x168>
 8002a72:	4632      	mov	r2, r6
 8002a74:	463b      	mov	r3, r7
 8002a76:	4630      	mov	r0, r6
 8002a78:	4639      	mov	r1, r7
 8002a7a:	f7fd fd81 	bl	8000580 <__aeabi_dmul>
 8002a7e:	e76a      	b.n	8002956 <__ieee754_pow+0x3e>
 8002a80:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <__ieee754_pow+0x264>)
 8002a82:	4599      	cmp	r9, r3
 8002a84:	d10c      	bne.n	8002aa0 <__ieee754_pow+0x188>
 8002a86:	2d00      	cmp	r5, #0
 8002a88:	db0a      	blt.n	8002aa0 <__ieee754_pow+0x188>
 8002a8a:	ec47 6b10 	vmov	d0, r6, r7
 8002a8e:	b009      	add	sp, #36	; 0x24
 8002a90:	ecbd 8b06 	vpop	{d8-d10}
 8002a94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a98:	f000 bd20 	b.w	80034dc <__ieee754_sqrt>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9304      	str	r3, [sp, #16]
 8002aa0:	ec47 6b10 	vmov	d0, r6, r7
 8002aa4:	f000 fc62 	bl	800336c <fabs>
 8002aa8:	ec51 0b10 	vmov	r0, r1, d0
 8002aac:	f1ba 0f00 	cmp.w	sl, #0
 8002ab0:	d129      	bne.n	8002b06 <__ieee754_pow+0x1ee>
 8002ab2:	b124      	cbz	r4, 8002abe <__ieee754_pow+0x1a6>
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <__ieee754_pow+0x25c>)
 8002ab6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d123      	bne.n	8002b06 <__ieee754_pow+0x1ee>
 8002abe:	f1b9 0f00 	cmp.w	r9, #0
 8002ac2:	da05      	bge.n	8002ad0 <__ieee754_pow+0x1b8>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	2000      	movs	r0, #0
 8002aca:	492a      	ldr	r1, [pc, #168]	; (8002b74 <__ieee754_pow+0x25c>)
 8002acc:	f7fd fe82 	bl	80007d4 <__aeabi_ddiv>
 8002ad0:	2d00      	cmp	r5, #0
 8002ad2:	f6bf af40 	bge.w	8002956 <__ieee754_pow+0x3e>
 8002ad6:	9b04      	ldr	r3, [sp, #16]
 8002ad8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002adc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002ae0:	431c      	orrs	r4, r3
 8002ae2:	d108      	bne.n	8002af6 <__ieee754_pow+0x1de>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fd fb90 	bl	8000210 <__aeabi_dsub>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	e78f      	b.n	8002a16 <__ieee754_pow+0xfe>
 8002af6:	9b04      	ldr	r3, [sp, #16]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f47f af2c 	bne.w	8002956 <__ieee754_pow+0x3e>
 8002afe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b02:	4619      	mov	r1, r3
 8002b04:	e727      	b.n	8002956 <__ieee754_pow+0x3e>
 8002b06:	0feb      	lsrs	r3, r5, #31
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	9306      	str	r3, [sp, #24]
 8002b0c:	9a06      	ldr	r2, [sp, #24]
 8002b0e:	9b04      	ldr	r3, [sp, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	d102      	bne.n	8002b1a <__ieee754_pow+0x202>
 8002b14:	4632      	mov	r2, r6
 8002b16:	463b      	mov	r3, r7
 8002b18:	e7e6      	b.n	8002ae8 <__ieee754_pow+0x1d0>
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <__ieee754_pow+0x268>)
 8002b1c:	4598      	cmp	r8, r3
 8002b1e:	f340 80fb 	ble.w	8002d18 <__ieee754_pow+0x400>
 8002b22:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002b26:	4598      	cmp	r8, r3
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <__ieee754_pow+0x260>)
 8002b2a:	dd0c      	ble.n	8002b46 <__ieee754_pow+0x22e>
 8002b2c:	429c      	cmp	r4, r3
 8002b2e:	dc0f      	bgt.n	8002b50 <__ieee754_pow+0x238>
 8002b30:	f1b9 0f00 	cmp.w	r9, #0
 8002b34:	da0f      	bge.n	8002b56 <__ieee754_pow+0x23e>
 8002b36:	2000      	movs	r0, #0
 8002b38:	b009      	add	sp, #36	; 0x24
 8002b3a:	ecbd 8b06 	vpop	{d8-d10}
 8002b3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b42:	f000 bcc2 	b.w	80034ca <__math_oflow>
 8002b46:	429c      	cmp	r4, r3
 8002b48:	dbf2      	blt.n	8002b30 <__ieee754_pow+0x218>
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <__ieee754_pow+0x25c>)
 8002b4c:	429c      	cmp	r4, r3
 8002b4e:	dd19      	ble.n	8002b84 <__ieee754_pow+0x26c>
 8002b50:	f1b9 0f00 	cmp.w	r9, #0
 8002b54:	dcef      	bgt.n	8002b36 <__ieee754_pow+0x21e>
 8002b56:	2000      	movs	r0, #0
 8002b58:	b009      	add	sp, #36	; 0x24
 8002b5a:	ecbd 8b06 	vpop	{d8-d10}
 8002b5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b62:	f000 bca9 	b.w	80034b8 <__math_uflow>
 8002b66:	bf00      	nop
 8002b68:	fff00000 	.word	0xfff00000
 8002b6c:	7ff00000 	.word	0x7ff00000
 8002b70:	433fffff 	.word	0x433fffff
 8002b74:	3ff00000 	.word	0x3ff00000
 8002b78:	3fefffff 	.word	0x3fefffff
 8002b7c:	3fe00000 	.word	0x3fe00000
 8002b80:	41e00000 	.word	0x41e00000
 8002b84:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <__ieee754_pow+0x3f0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	f7fd fb42 	bl	8000210 <__aeabi_dsub>
 8002b8c:	a354      	add	r3, pc, #336	; (adr r3, 8002ce0 <__ieee754_pow+0x3c8>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	4604      	mov	r4, r0
 8002b94:	460d      	mov	r5, r1
 8002b96:	f7fd fcf3 	bl	8000580 <__aeabi_dmul>
 8002b9a:	a353      	add	r3, pc, #332	; (adr r3, 8002ce8 <__ieee754_pow+0x3d0>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	4606      	mov	r6, r0
 8002ba2:	460f      	mov	r7, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fcea 	bl	8000580 <__aeabi_dmul>
 8002bac:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <__ieee754_pow+0x3f4>)
 8002bae:	4682      	mov	sl, r0
 8002bb0:	468b      	mov	fp, r1
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	f7fd fce2 	bl	8000580 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	a14b      	add	r1, pc, #300	; (adr r1, 8002cf0 <__ieee754_pow+0x3d8>)
 8002bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bc6:	f7fd fb23 	bl	8000210 <__aeabi_dsub>
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	f7fd fcd7 	bl	8000580 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	494d      	ldr	r1, [pc, #308]	; (8002d10 <__ieee754_pow+0x3f8>)
 8002bda:	f7fd fb19 	bl	8000210 <__aeabi_dsub>
 8002bde:	4622      	mov	r2, r4
 8002be0:	4680      	mov	r8, r0
 8002be2:	4689      	mov	r9, r1
 8002be4:	462b      	mov	r3, r5
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	f7fd fcc9 	bl	8000580 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	f7fd fcc3 	bl	8000580 <__aeabi_dmul>
 8002bfa:	a33f      	add	r3, pc, #252	; (adr r3, 8002cf8 <__ieee754_pow+0x3e0>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fcbe 	bl	8000580 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4650      	mov	r0, sl
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	f7fd fb00 	bl	8000210 <__aeabi_dsub>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4680      	mov	r8, r0
 8002c16:	4689      	mov	r9, r1
 8002c18:	4630      	mov	r0, r6
 8002c1a:	4639      	mov	r1, r7
 8002c1c:	f7fd fafa 	bl	8000214 <__adddf3>
 8002c20:	2000      	movs	r0, #0
 8002c22:	4632      	mov	r2, r6
 8002c24:	463b      	mov	r3, r7
 8002c26:	4604      	mov	r4, r0
 8002c28:	460d      	mov	r5, r1
 8002c2a:	f7fd faf1 	bl	8000210 <__aeabi_dsub>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4640      	mov	r0, r8
 8002c34:	4649      	mov	r1, r9
 8002c36:	f7fd faeb 	bl	8000210 <__aeabi_dsub>
 8002c3a:	9b04      	ldr	r3, [sp, #16]
 8002c3c:	9a06      	ldr	r2, [sp, #24]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	4313      	orrs	r3, r2
 8002c42:	4682      	mov	sl, r0
 8002c44:	468b      	mov	fp, r1
 8002c46:	f040 81e7 	bne.w	8003018 <__ieee754_pow+0x700>
 8002c4a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8002d00 <__ieee754_pow+0x3e8>
 8002c4e:	eeb0 8a47 	vmov.f32	s16, s14
 8002c52:	eef0 8a67 	vmov.f32	s17, s15
 8002c56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002c5a:	2600      	movs	r6, #0
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	463b      	mov	r3, r7
 8002c60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c64:	f7fd fad4 	bl	8000210 <__aeabi_dsub>
 8002c68:	4622      	mov	r2, r4
 8002c6a:	462b      	mov	r3, r5
 8002c6c:	f7fd fc88 	bl	8000580 <__aeabi_dmul>
 8002c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c74:	4680      	mov	r8, r0
 8002c76:	4689      	mov	r9, r1
 8002c78:	4650      	mov	r0, sl
 8002c7a:	4659      	mov	r1, fp
 8002c7c:	f7fd fc80 	bl	8000580 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4640      	mov	r0, r8
 8002c86:	4649      	mov	r1, r9
 8002c88:	f7fd fac4 	bl	8000214 <__adddf3>
 8002c8c:	4632      	mov	r2, r6
 8002c8e:	463b      	mov	r3, r7
 8002c90:	4680      	mov	r8, r0
 8002c92:	4689      	mov	r9, r1
 8002c94:	4620      	mov	r0, r4
 8002c96:	4629      	mov	r1, r5
 8002c98:	f7fd fc72 	bl	8000580 <__aeabi_dmul>
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	4640      	mov	r0, r8
 8002ca8:	f7fd fab4 	bl	8000214 <__adddf3>
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <__ieee754_pow+0x3fc>)
 8002cae:	4299      	cmp	r1, r3
 8002cb0:	ec45 4b19 	vmov	d9, r4, r5
 8002cb4:	4606      	mov	r6, r0
 8002cb6:	460f      	mov	r7, r1
 8002cb8:	468b      	mov	fp, r1
 8002cba:	f340 82f0 	ble.w	800329e <__ieee754_pow+0x986>
 8002cbe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002cc2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002cc6:	4303      	orrs	r3, r0
 8002cc8:	f000 81e4 	beq.w	8003094 <__ieee754_pow+0x77c>
 8002ccc:	ec51 0b18 	vmov	r0, r1, d8
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f7fd fec6 	bl	8000a64 <__aeabi_dcmplt>
 8002cd8:	3800      	subs	r0, #0
 8002cda:	bf18      	it	ne
 8002cdc:	2001      	movne	r0, #1
 8002cde:	e72b      	b.n	8002b38 <__ieee754_pow+0x220>
 8002ce0:	60000000 	.word	0x60000000
 8002ce4:	3ff71547 	.word	0x3ff71547
 8002ce8:	f85ddf44 	.word	0xf85ddf44
 8002cec:	3e54ae0b 	.word	0x3e54ae0b
 8002cf0:	55555555 	.word	0x55555555
 8002cf4:	3fd55555 	.word	0x3fd55555
 8002cf8:	652b82fe 	.word	0x652b82fe
 8002cfc:	3ff71547 	.word	0x3ff71547
 8002d00:	00000000 	.word	0x00000000
 8002d04:	bff00000 	.word	0xbff00000
 8002d08:	3ff00000 	.word	0x3ff00000
 8002d0c:	3fd00000 	.word	0x3fd00000
 8002d10:	3fe00000 	.word	0x3fe00000
 8002d14:	408fffff 	.word	0x408fffff
 8002d18:	4bd5      	ldr	r3, [pc, #852]	; (8003070 <__ieee754_pow+0x758>)
 8002d1a:	402b      	ands	r3, r5
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	b92b      	cbnz	r3, 8002d2c <__ieee754_pow+0x414>
 8002d20:	4bd4      	ldr	r3, [pc, #848]	; (8003074 <__ieee754_pow+0x75c>)
 8002d22:	f7fd fc2d 	bl	8000580 <__aeabi_dmul>
 8002d26:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	1523      	asrs	r3, r4, #20
 8002d2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002d32:	4413      	add	r3, r2
 8002d34:	9305      	str	r3, [sp, #20]
 8002d36:	4bd0      	ldr	r3, [pc, #832]	; (8003078 <__ieee754_pow+0x760>)
 8002d38:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002d3c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002d40:	429c      	cmp	r4, r3
 8002d42:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002d46:	dd08      	ble.n	8002d5a <__ieee754_pow+0x442>
 8002d48:	4bcc      	ldr	r3, [pc, #816]	; (800307c <__ieee754_pow+0x764>)
 8002d4a:	429c      	cmp	r4, r3
 8002d4c:	f340 8162 	ble.w	8003014 <__ieee754_pow+0x6fc>
 8002d50:	9b05      	ldr	r3, [sp, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	9305      	str	r3, [sp, #20]
 8002d56:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002d5a:	2400      	movs	r4, #0
 8002d5c:	00e3      	lsls	r3, r4, #3
 8002d5e:	9307      	str	r3, [sp, #28]
 8002d60:	4bc7      	ldr	r3, [pc, #796]	; (8003080 <__ieee754_pow+0x768>)
 8002d62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002d66:	ed93 7b00 	vldr	d7, [r3]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	ec53 2b17 	vmov	r2, r3, d7
 8002d70:	eeb0 9a47 	vmov.f32	s18, s14
 8002d74:	eef0 9a67 	vmov.f32	s19, s15
 8002d78:	4682      	mov	sl, r0
 8002d7a:	f7fd fa49 	bl	8000210 <__aeabi_dsub>
 8002d7e:	4652      	mov	r2, sl
 8002d80:	4606      	mov	r6, r0
 8002d82:	460f      	mov	r7, r1
 8002d84:	462b      	mov	r3, r5
 8002d86:	ec51 0b19 	vmov	r0, r1, d9
 8002d8a:	f7fd fa43 	bl	8000214 <__adddf3>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	2000      	movs	r0, #0
 8002d94:	49bb      	ldr	r1, [pc, #748]	; (8003084 <__ieee754_pow+0x76c>)
 8002d96:	f7fd fd1d 	bl	80007d4 <__aeabi_ddiv>
 8002d9a:	ec41 0b1a 	vmov	d10, r0, r1
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4630      	mov	r0, r6
 8002da4:	4639      	mov	r1, r7
 8002da6:	f7fd fbeb 	bl	8000580 <__aeabi_dmul>
 8002daa:	2300      	movs	r3, #0
 8002dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002db6:	46ab      	mov	fp, r5
 8002db8:	106d      	asrs	r5, r5, #1
 8002dba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002dbe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002dc2:	ec41 0b18 	vmov	d8, r0, r1
 8002dc6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4640      	mov	r0, r8
 8002dce:	4649      	mov	r1, r9
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	f7fd fbd4 	bl	8000580 <__aeabi_dmul>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4630      	mov	r0, r6
 8002dde:	4639      	mov	r1, r7
 8002de0:	f7fd fa16 	bl	8000210 <__aeabi_dsub>
 8002de4:	ec53 2b19 	vmov	r2, r3, d9
 8002de8:	4606      	mov	r6, r0
 8002dea:	460f      	mov	r7, r1
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd fa0e 	bl	8000210 <__aeabi_dsub>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4650      	mov	r0, sl
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	f7fd fa08 	bl	8000210 <__aeabi_dsub>
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	f7fd fbbc 	bl	8000580 <__aeabi_dmul>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	4639      	mov	r1, r7
 8002e10:	f7fd f9fe 	bl	8000210 <__aeabi_dsub>
 8002e14:	ec53 2b1a 	vmov	r2, r3, d10
 8002e18:	f7fd fbb2 	bl	8000580 <__aeabi_dmul>
 8002e1c:	ec53 2b18 	vmov	r2, r3, d8
 8002e20:	ec41 0b19 	vmov	d9, r0, r1
 8002e24:	ec51 0b18 	vmov	r0, r1, d8
 8002e28:	f7fd fbaa 	bl	8000580 <__aeabi_dmul>
 8002e2c:	a37c      	add	r3, pc, #496	; (adr r3, 8003020 <__ieee754_pow+0x708>)
 8002e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	f7fd fba3 	bl	8000580 <__aeabi_dmul>
 8002e3a:	a37b      	add	r3, pc, #492	; (adr r3, 8003028 <__ieee754_pow+0x710>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	f7fd f9e8 	bl	8000214 <__adddf3>
 8002e44:	4622      	mov	r2, r4
 8002e46:	462b      	mov	r3, r5
 8002e48:	f7fd fb9a 	bl	8000580 <__aeabi_dmul>
 8002e4c:	a378      	add	r3, pc, #480	; (adr r3, 8003030 <__ieee754_pow+0x718>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd f9df 	bl	8000214 <__adddf3>
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	f7fd fb91 	bl	8000580 <__aeabi_dmul>
 8002e5e:	a376      	add	r3, pc, #472	; (adr r3, 8003038 <__ieee754_pow+0x720>)
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f7fd f9d6 	bl	8000214 <__adddf3>
 8002e68:	4622      	mov	r2, r4
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	f7fd fb88 	bl	8000580 <__aeabi_dmul>
 8002e70:	a373      	add	r3, pc, #460	; (adr r3, 8003040 <__ieee754_pow+0x728>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd f9cd 	bl	8000214 <__adddf3>
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f7fd fb7f 	bl	8000580 <__aeabi_dmul>
 8002e82:	a371      	add	r3, pc, #452	; (adr r3, 8003048 <__ieee754_pow+0x730>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd f9c4 	bl	8000214 <__adddf3>
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	4606      	mov	r6, r0
 8002e90:	460f      	mov	r7, r1
 8002e92:	462b      	mov	r3, r5
 8002e94:	4620      	mov	r0, r4
 8002e96:	4629      	mov	r1, r5
 8002e98:	f7fd fb72 	bl	8000580 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	f7fd fb6c 	bl	8000580 <__aeabi_dmul>
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	4604      	mov	r4, r0
 8002eac:	460d      	mov	r5, r1
 8002eae:	464b      	mov	r3, r9
 8002eb0:	ec51 0b18 	vmov	r0, r1, d8
 8002eb4:	f7fd f9ae 	bl	8000214 <__adddf3>
 8002eb8:	ec53 2b19 	vmov	r2, r3, d9
 8002ebc:	f7fd fb60 	bl	8000580 <__aeabi_dmul>
 8002ec0:	4622      	mov	r2, r4
 8002ec2:	462b      	mov	r3, r5
 8002ec4:	f7fd f9a6 	bl	8000214 <__adddf3>
 8002ec8:	4642      	mov	r2, r8
 8002eca:	4682      	mov	sl, r0
 8002ecc:	468b      	mov	fp, r1
 8002ece:	464b      	mov	r3, r9
 8002ed0:	4640      	mov	r0, r8
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	f7fd fb54 	bl	8000580 <__aeabi_dmul>
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	; (8003088 <__ieee754_pow+0x770>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	4606      	mov	r6, r0
 8002ede:	460f      	mov	r7, r1
 8002ee0:	f7fd f998 	bl	8000214 <__adddf3>
 8002ee4:	4652      	mov	r2, sl
 8002ee6:	465b      	mov	r3, fp
 8002ee8:	f7fd f994 	bl	8000214 <__adddf3>
 8002eec:	2000      	movs	r0, #0
 8002eee:	4604      	mov	r4, r0
 8002ef0:	460d      	mov	r5, r1
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fb41 	bl	8000580 <__aeabi_dmul>
 8002efe:	4b62      	ldr	r3, [pc, #392]	; (8003088 <__ieee754_pow+0x770>)
 8002f00:	4680      	mov	r8, r0
 8002f02:	4689      	mov	r9, r1
 8002f04:	2200      	movs	r2, #0
 8002f06:	4620      	mov	r0, r4
 8002f08:	4629      	mov	r1, r5
 8002f0a:	f7fd f981 	bl	8000210 <__aeabi_dsub>
 8002f0e:	4632      	mov	r2, r6
 8002f10:	463b      	mov	r3, r7
 8002f12:	f7fd f97d 	bl	8000210 <__aeabi_dsub>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4650      	mov	r0, sl
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	f7fd f977 	bl	8000210 <__aeabi_dsub>
 8002f22:	ec53 2b18 	vmov	r2, r3, d8
 8002f26:	f7fd fb2b 	bl	8000580 <__aeabi_dmul>
 8002f2a:	4622      	mov	r2, r4
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	460f      	mov	r7, r1
 8002f30:	462b      	mov	r3, r5
 8002f32:	ec51 0b19 	vmov	r0, r1, d9
 8002f36:	f7fd fb23 	bl	8000580 <__aeabi_dmul>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4630      	mov	r0, r6
 8002f40:	4639      	mov	r1, r7
 8002f42:	f7fd f967 	bl	8000214 <__adddf3>
 8002f46:	4606      	mov	r6, r0
 8002f48:	460f      	mov	r7, r1
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4640      	mov	r0, r8
 8002f50:	4649      	mov	r1, r9
 8002f52:	f7fd f95f 	bl	8000214 <__adddf3>
 8002f56:	a33e      	add	r3, pc, #248	; (adr r3, 8003050 <__ieee754_pow+0x738>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	4604      	mov	r4, r0
 8002f60:	460d      	mov	r5, r1
 8002f62:	f7fd fb0d 	bl	8000580 <__aeabi_dmul>
 8002f66:	4642      	mov	r2, r8
 8002f68:	ec41 0b18 	vmov	d8, r0, r1
 8002f6c:	464b      	mov	r3, r9
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7fd f94d 	bl	8000210 <__aeabi_dsub>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4639      	mov	r1, r7
 8002f7e:	f7fd f947 	bl	8000210 <__aeabi_dsub>
 8002f82:	a335      	add	r3, pc, #212	; (adr r3, 8003058 <__ieee754_pow+0x740>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fafa 	bl	8000580 <__aeabi_dmul>
 8002f8c:	a334      	add	r3, pc, #208	; (adr r3, 8003060 <__ieee754_pow+0x748>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	4606      	mov	r6, r0
 8002f94:	460f      	mov	r7, r1
 8002f96:	4620      	mov	r0, r4
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f7fd faf1 	bl	8000580 <__aeabi_dmul>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	4639      	mov	r1, r7
 8002fa6:	f7fd f935 	bl	8000214 <__adddf3>
 8002faa:	9a07      	ldr	r2, [sp, #28]
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <__ieee754_pow+0x774>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd f92e 	bl	8000214 <__adddf3>
 8002fb8:	4682      	mov	sl, r0
 8002fba:	9805      	ldr	r0, [sp, #20]
 8002fbc:	468b      	mov	fp, r1
 8002fbe:	f7fd fa75 	bl	80004ac <__aeabi_i2d>
 8002fc2:	9a07      	ldr	r2, [sp, #28]
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <__ieee754_pow+0x778>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fcc:	4606      	mov	r6, r0
 8002fce:	460f      	mov	r7, r1
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	465b      	mov	r3, fp
 8002fd4:	ec51 0b18 	vmov	r0, r1, d8
 8002fd8:	f7fd f91c 	bl	8000214 <__adddf3>
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	f7fd f918 	bl	8000214 <__adddf3>
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	463b      	mov	r3, r7
 8002fe8:	f7fd f914 	bl	8000214 <__adddf3>
 8002fec:	2000      	movs	r0, #0
 8002fee:	4632      	mov	r2, r6
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	460d      	mov	r5, r1
 8002ff6:	f7fd f90b 	bl	8000210 <__aeabi_dsub>
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	f7fd f907 	bl	8000210 <__aeabi_dsub>
 8003002:	ec53 2b18 	vmov	r2, r3, d8
 8003006:	f7fd f903 	bl	8000210 <__aeabi_dsub>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4650      	mov	r0, sl
 8003010:	4659      	mov	r1, fp
 8003012:	e610      	b.n	8002c36 <__ieee754_pow+0x31e>
 8003014:	2401      	movs	r4, #1
 8003016:	e6a1      	b.n	8002d5c <__ieee754_pow+0x444>
 8003018:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8003068 <__ieee754_pow+0x750>
 800301c:	e617      	b.n	8002c4e <__ieee754_pow+0x336>
 800301e:	bf00      	nop
 8003020:	4a454eef 	.word	0x4a454eef
 8003024:	3fca7e28 	.word	0x3fca7e28
 8003028:	93c9db65 	.word	0x93c9db65
 800302c:	3fcd864a 	.word	0x3fcd864a
 8003030:	a91d4101 	.word	0xa91d4101
 8003034:	3fd17460 	.word	0x3fd17460
 8003038:	518f264d 	.word	0x518f264d
 800303c:	3fd55555 	.word	0x3fd55555
 8003040:	db6fabff 	.word	0xdb6fabff
 8003044:	3fdb6db6 	.word	0x3fdb6db6
 8003048:	33333303 	.word	0x33333303
 800304c:	3fe33333 	.word	0x3fe33333
 8003050:	e0000000 	.word	0xe0000000
 8003054:	3feec709 	.word	0x3feec709
 8003058:	dc3a03fd 	.word	0xdc3a03fd
 800305c:	3feec709 	.word	0x3feec709
 8003060:	145b01f5 	.word	0x145b01f5
 8003064:	be3e2fe0 	.word	0xbe3e2fe0
 8003068:	00000000 	.word	0x00000000
 800306c:	3ff00000 	.word	0x3ff00000
 8003070:	7ff00000 	.word	0x7ff00000
 8003074:	43400000 	.word	0x43400000
 8003078:	0003988e 	.word	0x0003988e
 800307c:	000bb679 	.word	0x000bb679
 8003080:	080036e8 	.word	0x080036e8
 8003084:	3ff00000 	.word	0x3ff00000
 8003088:	40080000 	.word	0x40080000
 800308c:	08003708 	.word	0x08003708
 8003090:	080036f8 	.word	0x080036f8
 8003094:	a3b3      	add	r3, pc, #716	; (adr r3, 8003364 <__ieee754_pow+0xa4c>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	4640      	mov	r0, r8
 800309c:	4649      	mov	r1, r9
 800309e:	f7fd f8b9 	bl	8000214 <__adddf3>
 80030a2:	4622      	mov	r2, r4
 80030a4:	ec41 0b1a 	vmov	d10, r0, r1
 80030a8:	462b      	mov	r3, r5
 80030aa:	4630      	mov	r0, r6
 80030ac:	4639      	mov	r1, r7
 80030ae:	f7fd f8af 	bl	8000210 <__aeabi_dsub>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	ec51 0b1a 	vmov	r0, r1, d10
 80030ba:	f7fd fcf1 	bl	8000aa0 <__aeabi_dcmpgt>
 80030be:	2800      	cmp	r0, #0
 80030c0:	f47f ae04 	bne.w	8002ccc <__ieee754_pow+0x3b4>
 80030c4:	4aa2      	ldr	r2, [pc, #648]	; (8003350 <__ieee754_pow+0xa38>)
 80030c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80030ca:	4293      	cmp	r3, r2
 80030cc:	f340 8107 	ble.w	80032de <__ieee754_pow+0x9c6>
 80030d0:	151b      	asrs	r3, r3, #20
 80030d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80030d6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80030da:	fa4a fa03 	asr.w	sl, sl, r3
 80030de:	44da      	add	sl, fp
 80030e0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80030e4:	489b      	ldr	r0, [pc, #620]	; (8003354 <__ieee754_pow+0xa3c>)
 80030e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80030ea:	4108      	asrs	r0, r1
 80030ec:	ea00 030a 	and.w	r3, r0, sl
 80030f0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80030f4:	f1c1 0114 	rsb	r1, r1, #20
 80030f8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80030fc:	fa4a fa01 	asr.w	sl, sl, r1
 8003100:	f1bb 0f00 	cmp.w	fp, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	bfb8      	it	lt
 800310e:	f1ca 0a00 	rsblt	sl, sl, #0
 8003112:	f7fd f87d 	bl	8000210 <__aeabi_dsub>
 8003116:	ec41 0b19 	vmov	d9, r0, r1
 800311a:	4642      	mov	r2, r8
 800311c:	464b      	mov	r3, r9
 800311e:	ec51 0b19 	vmov	r0, r1, d9
 8003122:	f7fd f877 	bl	8000214 <__adddf3>
 8003126:	a37a      	add	r3, pc, #488	; (adr r3, 8003310 <__ieee754_pow+0x9f8>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	2000      	movs	r0, #0
 800312e:	4604      	mov	r4, r0
 8003130:	460d      	mov	r5, r1
 8003132:	f7fd fa25 	bl	8000580 <__aeabi_dmul>
 8003136:	ec53 2b19 	vmov	r2, r3, d9
 800313a:	4606      	mov	r6, r0
 800313c:	460f      	mov	r7, r1
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd f865 	bl	8000210 <__aeabi_dsub>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4640      	mov	r0, r8
 800314c:	4649      	mov	r1, r9
 800314e:	f7fd f85f 	bl	8000210 <__aeabi_dsub>
 8003152:	a371      	add	r3, pc, #452	; (adr r3, 8003318 <__ieee754_pow+0xa00>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd fa12 	bl	8000580 <__aeabi_dmul>
 800315c:	a370      	add	r3, pc, #448	; (adr r3, 8003320 <__ieee754_pow+0xa08>)
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	4680      	mov	r8, r0
 8003164:	4689      	mov	r9, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fd fa09 	bl	8000580 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4640      	mov	r0, r8
 8003174:	4649      	mov	r1, r9
 8003176:	f7fd f84d 	bl	8000214 <__adddf3>
 800317a:	4604      	mov	r4, r0
 800317c:	460d      	mov	r5, r1
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4630      	mov	r0, r6
 8003184:	4639      	mov	r1, r7
 8003186:	f7fd f845 	bl	8000214 <__adddf3>
 800318a:	4632      	mov	r2, r6
 800318c:	463b      	mov	r3, r7
 800318e:	4680      	mov	r8, r0
 8003190:	4689      	mov	r9, r1
 8003192:	f7fd f83d 	bl	8000210 <__aeabi_dsub>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd f837 	bl	8000210 <__aeabi_dsub>
 80031a2:	4642      	mov	r2, r8
 80031a4:	4606      	mov	r6, r0
 80031a6:	460f      	mov	r7, r1
 80031a8:	464b      	mov	r3, r9
 80031aa:	4640      	mov	r0, r8
 80031ac:	4649      	mov	r1, r9
 80031ae:	f7fd f9e7 	bl	8000580 <__aeabi_dmul>
 80031b2:	a35d      	add	r3, pc, #372	; (adr r3, 8003328 <__ieee754_pow+0xa10>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	4604      	mov	r4, r0
 80031ba:	460d      	mov	r5, r1
 80031bc:	f7fd f9e0 	bl	8000580 <__aeabi_dmul>
 80031c0:	a35b      	add	r3, pc, #364	; (adr r3, 8003330 <__ieee754_pow+0xa18>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd f823 	bl	8000210 <__aeabi_dsub>
 80031ca:	4622      	mov	r2, r4
 80031cc:	462b      	mov	r3, r5
 80031ce:	f7fd f9d7 	bl	8000580 <__aeabi_dmul>
 80031d2:	a359      	add	r3, pc, #356	; (adr r3, 8003338 <__ieee754_pow+0xa20>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd f81c 	bl	8000214 <__adddf3>
 80031dc:	4622      	mov	r2, r4
 80031de:	462b      	mov	r3, r5
 80031e0:	f7fd f9ce 	bl	8000580 <__aeabi_dmul>
 80031e4:	a356      	add	r3, pc, #344	; (adr r3, 8003340 <__ieee754_pow+0xa28>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd f811 	bl	8000210 <__aeabi_dsub>
 80031ee:	4622      	mov	r2, r4
 80031f0:	462b      	mov	r3, r5
 80031f2:	f7fd f9c5 	bl	8000580 <__aeabi_dmul>
 80031f6:	a354      	add	r3, pc, #336	; (adr r3, 8003348 <__ieee754_pow+0xa30>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	f7fd f80a 	bl	8000214 <__adddf3>
 8003200:	4622      	mov	r2, r4
 8003202:	462b      	mov	r3, r5
 8003204:	f7fd f9bc 	bl	8000580 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4640      	mov	r0, r8
 800320e:	4649      	mov	r1, r9
 8003210:	f7fc fffe 	bl	8000210 <__aeabi_dsub>
 8003214:	4604      	mov	r4, r0
 8003216:	460d      	mov	r5, r1
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4640      	mov	r0, r8
 800321e:	4649      	mov	r1, r9
 8003220:	f7fd f9ae 	bl	8000580 <__aeabi_dmul>
 8003224:	2200      	movs	r2, #0
 8003226:	ec41 0b19 	vmov	d9, r0, r1
 800322a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800322e:	4620      	mov	r0, r4
 8003230:	4629      	mov	r1, r5
 8003232:	f7fc ffed 	bl	8000210 <__aeabi_dsub>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	ec51 0b19 	vmov	r0, r1, d9
 800323e:	f7fd fac9 	bl	80007d4 <__aeabi_ddiv>
 8003242:	4632      	mov	r2, r6
 8003244:	4604      	mov	r4, r0
 8003246:	460d      	mov	r5, r1
 8003248:	463b      	mov	r3, r7
 800324a:	4640      	mov	r0, r8
 800324c:	4649      	mov	r1, r9
 800324e:	f7fd f997 	bl	8000580 <__aeabi_dmul>
 8003252:	4632      	mov	r2, r6
 8003254:	463b      	mov	r3, r7
 8003256:	f7fc ffdd 	bl	8000214 <__adddf3>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4620      	mov	r0, r4
 8003260:	4629      	mov	r1, r5
 8003262:	f7fc ffd5 	bl	8000210 <__aeabi_dsub>
 8003266:	4642      	mov	r2, r8
 8003268:	464b      	mov	r3, r9
 800326a:	f7fc ffd1 	bl	8000210 <__aeabi_dsub>
 800326e:	460b      	mov	r3, r1
 8003270:	4602      	mov	r2, r0
 8003272:	4939      	ldr	r1, [pc, #228]	; (8003358 <__ieee754_pow+0xa40>)
 8003274:	2000      	movs	r0, #0
 8003276:	f7fc ffcb 	bl	8000210 <__aeabi_dsub>
 800327a:	ec41 0b10 	vmov	d0, r0, r1
 800327e:	ee10 3a90 	vmov	r3, s1
 8003282:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328a:	da2b      	bge.n	80032e4 <__ieee754_pow+0x9cc>
 800328c:	4650      	mov	r0, sl
 800328e:	f000 f877 	bl	8003380 <scalbn>
 8003292:	ec51 0b10 	vmov	r0, r1, d0
 8003296:	ec53 2b18 	vmov	r2, r3, d8
 800329a:	f7ff bbee 	b.w	8002a7a <__ieee754_pow+0x162>
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <__ieee754_pow+0xa44>)
 80032a0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80032a4:	429e      	cmp	r6, r3
 80032a6:	f77f af0d 	ble.w	80030c4 <__ieee754_pow+0x7ac>
 80032aa:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <__ieee754_pow+0xa48>)
 80032ac:	440b      	add	r3, r1
 80032ae:	4303      	orrs	r3, r0
 80032b0:	d009      	beq.n	80032c6 <__ieee754_pow+0x9ae>
 80032b2:	ec51 0b18 	vmov	r0, r1, d8
 80032b6:	2200      	movs	r2, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	f7fd fbd3 	bl	8000a64 <__aeabi_dcmplt>
 80032be:	3800      	subs	r0, #0
 80032c0:	bf18      	it	ne
 80032c2:	2001      	movne	r0, #1
 80032c4:	e448      	b.n	8002b58 <__ieee754_pow+0x240>
 80032c6:	4622      	mov	r2, r4
 80032c8:	462b      	mov	r3, r5
 80032ca:	f7fc ffa1 	bl	8000210 <__aeabi_dsub>
 80032ce:	4642      	mov	r2, r8
 80032d0:	464b      	mov	r3, r9
 80032d2:	f7fd fbdb 	bl	8000a8c <__aeabi_dcmpge>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	f43f aef4 	beq.w	80030c4 <__ieee754_pow+0x7ac>
 80032dc:	e7e9      	b.n	80032b2 <__ieee754_pow+0x99a>
 80032de:	f04f 0a00 	mov.w	sl, #0
 80032e2:	e71a      	b.n	800311a <__ieee754_pow+0x802>
 80032e4:	ec51 0b10 	vmov	r0, r1, d0
 80032e8:	4619      	mov	r1, r3
 80032ea:	e7d4      	b.n	8003296 <__ieee754_pow+0x97e>
 80032ec:	491a      	ldr	r1, [pc, #104]	; (8003358 <__ieee754_pow+0xa40>)
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7ff bb31 	b.w	8002956 <__ieee754_pow+0x3e>
 80032f4:	2000      	movs	r0, #0
 80032f6:	2100      	movs	r1, #0
 80032f8:	f7ff bb2d 	b.w	8002956 <__ieee754_pow+0x3e>
 80032fc:	4630      	mov	r0, r6
 80032fe:	4639      	mov	r1, r7
 8003300:	f7ff bb29 	b.w	8002956 <__ieee754_pow+0x3e>
 8003304:	9204      	str	r2, [sp, #16]
 8003306:	f7ff bb7b 	b.w	8002a00 <__ieee754_pow+0xe8>
 800330a:	2300      	movs	r3, #0
 800330c:	f7ff bb65 	b.w	80029da <__ieee754_pow+0xc2>
 8003310:	00000000 	.word	0x00000000
 8003314:	3fe62e43 	.word	0x3fe62e43
 8003318:	fefa39ef 	.word	0xfefa39ef
 800331c:	3fe62e42 	.word	0x3fe62e42
 8003320:	0ca86c39 	.word	0x0ca86c39
 8003324:	be205c61 	.word	0xbe205c61
 8003328:	72bea4d0 	.word	0x72bea4d0
 800332c:	3e663769 	.word	0x3e663769
 8003330:	c5d26bf1 	.word	0xc5d26bf1
 8003334:	3ebbbd41 	.word	0x3ebbbd41
 8003338:	af25de2c 	.word	0xaf25de2c
 800333c:	3f11566a 	.word	0x3f11566a
 8003340:	16bebd93 	.word	0x16bebd93
 8003344:	3f66c16c 	.word	0x3f66c16c
 8003348:	5555553e 	.word	0x5555553e
 800334c:	3fc55555 	.word	0x3fc55555
 8003350:	3fe00000 	.word	0x3fe00000
 8003354:	fff00000 	.word	0xfff00000
 8003358:	3ff00000 	.word	0x3ff00000
 800335c:	4090cbff 	.word	0x4090cbff
 8003360:	3f6f3400 	.word	0x3f6f3400
 8003364:	652b82fe 	.word	0x652b82fe
 8003368:	3c971547 	.word	0x3c971547

0800336c <fabs>:
 800336c:	ec51 0b10 	vmov	r0, r1, d0
 8003370:	ee10 2a10 	vmov	r2, s0
 8003374:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003378:	ec43 2b10 	vmov	d0, r2, r3
 800337c:	4770      	bx	lr
	...

08003380 <scalbn>:
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	ec55 4b10 	vmov	r4, r5, d0
 8003386:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800338a:	4606      	mov	r6, r0
 800338c:	462b      	mov	r3, r5
 800338e:	b999      	cbnz	r1, 80033b8 <scalbn+0x38>
 8003390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003394:	4323      	orrs	r3, r4
 8003396:	d03f      	beq.n	8003418 <scalbn+0x98>
 8003398:	4b35      	ldr	r3, [pc, #212]	; (8003470 <scalbn+0xf0>)
 800339a:	4629      	mov	r1, r5
 800339c:	ee10 0a10 	vmov	r0, s0
 80033a0:	2200      	movs	r2, #0
 80033a2:	f7fd f8ed 	bl	8000580 <__aeabi_dmul>
 80033a6:	4b33      	ldr	r3, [pc, #204]	; (8003474 <scalbn+0xf4>)
 80033a8:	429e      	cmp	r6, r3
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	da10      	bge.n	80033d2 <scalbn+0x52>
 80033b0:	a327      	add	r3, pc, #156	; (adr r3, 8003450 <scalbn+0xd0>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	e01f      	b.n	80033f8 <scalbn+0x78>
 80033b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033bc:	4291      	cmp	r1, r2
 80033be:	d10c      	bne.n	80033da <scalbn+0x5a>
 80033c0:	ee10 2a10 	vmov	r2, s0
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fc ff24 	bl	8000214 <__adddf3>
 80033cc:	4604      	mov	r4, r0
 80033ce:	460d      	mov	r5, r1
 80033d0:	e022      	b.n	8003418 <scalbn+0x98>
 80033d2:	460b      	mov	r3, r1
 80033d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80033d8:	3936      	subs	r1, #54	; 0x36
 80033da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80033de:	4296      	cmp	r6, r2
 80033e0:	dd0d      	ble.n	80033fe <scalbn+0x7e>
 80033e2:	2d00      	cmp	r5, #0
 80033e4:	a11c      	add	r1, pc, #112	; (adr r1, 8003458 <scalbn+0xd8>)
 80033e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033ea:	da02      	bge.n	80033f2 <scalbn+0x72>
 80033ec:	a11c      	add	r1, pc, #112	; (adr r1, 8003460 <scalbn+0xe0>)
 80033ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033f2:	a319      	add	r3, pc, #100	; (adr r3, 8003458 <scalbn+0xd8>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f7fd f8c2 	bl	8000580 <__aeabi_dmul>
 80033fc:	e7e6      	b.n	80033cc <scalbn+0x4c>
 80033fe:	1872      	adds	r2, r6, r1
 8003400:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003404:	428a      	cmp	r2, r1
 8003406:	dcec      	bgt.n	80033e2 <scalbn+0x62>
 8003408:	2a00      	cmp	r2, #0
 800340a:	dd08      	ble.n	800341e <scalbn+0x9e>
 800340c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003410:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003414:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003418:	ec45 4b10 	vmov	d0, r4, r5
 800341c:	bd70      	pop	{r4, r5, r6, pc}
 800341e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003422:	da08      	bge.n	8003436 <scalbn+0xb6>
 8003424:	2d00      	cmp	r5, #0
 8003426:	a10a      	add	r1, pc, #40	; (adr r1, 8003450 <scalbn+0xd0>)
 8003428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800342c:	dac0      	bge.n	80033b0 <scalbn+0x30>
 800342e:	a10e      	add	r1, pc, #56	; (adr r1, 8003468 <scalbn+0xe8>)
 8003430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003434:	e7bc      	b.n	80033b0 <scalbn+0x30>
 8003436:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800343a:	3236      	adds	r2, #54	; 0x36
 800343c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003440:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003444:	4620      	mov	r0, r4
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <scalbn+0xf8>)
 8003448:	2200      	movs	r2, #0
 800344a:	e7d5      	b.n	80033f8 <scalbn+0x78>
 800344c:	f3af 8000 	nop.w
 8003450:	c2f8f359 	.word	0xc2f8f359
 8003454:	01a56e1f 	.word	0x01a56e1f
 8003458:	8800759c 	.word	0x8800759c
 800345c:	7e37e43c 	.word	0x7e37e43c
 8003460:	8800759c 	.word	0x8800759c
 8003464:	fe37e43c 	.word	0xfe37e43c
 8003468:	c2f8f359 	.word	0xc2f8f359
 800346c:	81a56e1f 	.word	0x81a56e1f
 8003470:	43500000 	.word	0x43500000
 8003474:	ffff3cb0 	.word	0xffff3cb0
 8003478:	3c900000 	.word	0x3c900000

0800347c <with_errno>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4604      	mov	r4, r0
 8003480:	460d      	mov	r5, r1
 8003482:	4616      	mov	r6, r2
 8003484:	f7ff f9a2 	bl	80027cc <__errno>
 8003488:	4629      	mov	r1, r5
 800348a:	6006      	str	r6, [r0, #0]
 800348c:	4620      	mov	r0, r4
 800348e:	bd70      	pop	{r4, r5, r6, pc}

08003490 <xflow>:
 8003490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003492:	4614      	mov	r4, r2
 8003494:	461d      	mov	r5, r3
 8003496:	b108      	cbz	r0, 800349c <xflow+0xc>
 8003498:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800349c:	e9cd 2300 	strd	r2, r3, [sp]
 80034a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7fd f86a 	bl	8000580 <__aeabi_dmul>
 80034ac:	2222      	movs	r2, #34	; 0x22
 80034ae:	b003      	add	sp, #12
 80034b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034b4:	f7ff bfe2 	b.w	800347c <with_errno>

080034b8 <__math_uflow>:
 80034b8:	b508      	push	{r3, lr}
 80034ba:	2200      	movs	r2, #0
 80034bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034c0:	f7ff ffe6 	bl	8003490 <xflow>
 80034c4:	ec41 0b10 	vmov	d0, r0, r1
 80034c8:	bd08      	pop	{r3, pc}

080034ca <__math_oflow>:
 80034ca:	b508      	push	{r3, lr}
 80034cc:	2200      	movs	r2, #0
 80034ce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80034d2:	f7ff ffdd 	bl	8003490 <xflow>
 80034d6:	ec41 0b10 	vmov	d0, r0, r1
 80034da:	bd08      	pop	{r3, pc}

080034dc <__ieee754_sqrt>:
 80034dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e0:	ec55 4b10 	vmov	r4, r5, d0
 80034e4:	4e67      	ldr	r6, [pc, #412]	; (8003684 <__ieee754_sqrt+0x1a8>)
 80034e6:	43ae      	bics	r6, r5
 80034e8:	ee10 0a10 	vmov	r0, s0
 80034ec:	ee10 2a10 	vmov	r2, s0
 80034f0:	4629      	mov	r1, r5
 80034f2:	462b      	mov	r3, r5
 80034f4:	d10d      	bne.n	8003512 <__ieee754_sqrt+0x36>
 80034f6:	f7fd f843 	bl	8000580 <__aeabi_dmul>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4620      	mov	r0, r4
 8003500:	4629      	mov	r1, r5
 8003502:	f7fc fe87 	bl	8000214 <__adddf3>
 8003506:	4604      	mov	r4, r0
 8003508:	460d      	mov	r5, r1
 800350a:	ec45 4b10 	vmov	d0, r4, r5
 800350e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003512:	2d00      	cmp	r5, #0
 8003514:	dc0b      	bgt.n	800352e <__ieee754_sqrt+0x52>
 8003516:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800351a:	4326      	orrs	r6, r4
 800351c:	d0f5      	beq.n	800350a <__ieee754_sqrt+0x2e>
 800351e:	b135      	cbz	r5, 800352e <__ieee754_sqrt+0x52>
 8003520:	f7fc fe76 	bl	8000210 <__aeabi_dsub>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	f7fd f954 	bl	80007d4 <__aeabi_ddiv>
 800352c:	e7eb      	b.n	8003506 <__ieee754_sqrt+0x2a>
 800352e:	1509      	asrs	r1, r1, #20
 8003530:	f000 808d 	beq.w	800364e <__ieee754_sqrt+0x172>
 8003534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003538:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800353c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003540:	07c9      	lsls	r1, r1, #31
 8003542:	bf5c      	itt	pl
 8003544:	005b      	lslpl	r3, r3, #1
 8003546:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800354a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800354e:	bf58      	it	pl
 8003550:	0052      	lslpl	r2, r2, #1
 8003552:	2500      	movs	r5, #0
 8003554:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003558:	1076      	asrs	r6, r6, #1
 800355a:	0052      	lsls	r2, r2, #1
 800355c:	f04f 0e16 	mov.w	lr, #22
 8003560:	46ac      	mov	ip, r5
 8003562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003566:	eb0c 0001 	add.w	r0, ip, r1
 800356a:	4298      	cmp	r0, r3
 800356c:	bfde      	ittt	le
 800356e:	1a1b      	suble	r3, r3, r0
 8003570:	eb00 0c01 	addle.w	ip, r0, r1
 8003574:	186d      	addle	r5, r5, r1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	f1be 0e01 	subs.w	lr, lr, #1
 800357c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003580:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003584:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003588:	d1ed      	bne.n	8003566 <__ieee754_sqrt+0x8a>
 800358a:	4674      	mov	r4, lr
 800358c:	2720      	movs	r7, #32
 800358e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003592:	4563      	cmp	r3, ip
 8003594:	eb01 000e 	add.w	r0, r1, lr
 8003598:	dc02      	bgt.n	80035a0 <__ieee754_sqrt+0xc4>
 800359a:	d113      	bne.n	80035c4 <__ieee754_sqrt+0xe8>
 800359c:	4290      	cmp	r0, r2
 800359e:	d811      	bhi.n	80035c4 <__ieee754_sqrt+0xe8>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	eb00 0e01 	add.w	lr, r0, r1
 80035a6:	da57      	bge.n	8003658 <__ieee754_sqrt+0x17c>
 80035a8:	f1be 0f00 	cmp.w	lr, #0
 80035ac:	db54      	blt.n	8003658 <__ieee754_sqrt+0x17c>
 80035ae:	f10c 0801 	add.w	r8, ip, #1
 80035b2:	eba3 030c 	sub.w	r3, r3, ip
 80035b6:	4290      	cmp	r0, r2
 80035b8:	bf88      	it	hi
 80035ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80035be:	1a12      	subs	r2, r2, r0
 80035c0:	440c      	add	r4, r1
 80035c2:	46c4      	mov	ip, r8
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	3f01      	subs	r7, #1
 80035c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80035cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80035d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80035d4:	d1dd      	bne.n	8003592 <__ieee754_sqrt+0xb6>
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d01b      	beq.n	8003612 <__ieee754_sqrt+0x136>
 80035da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003688 <__ieee754_sqrt+0x1ac>
 80035de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800368c <__ieee754_sqrt+0x1b0>
 80035e2:	e9da 0100 	ldrd	r0, r1, [sl]
 80035e6:	e9db 2300 	ldrd	r2, r3, [fp]
 80035ea:	f7fc fe11 	bl	8000210 <__aeabi_dsub>
 80035ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4640      	mov	r0, r8
 80035f8:	4649      	mov	r1, r9
 80035fa:	f7fd fa3d 	bl	8000a78 <__aeabi_dcmple>
 80035fe:	b140      	cbz	r0, 8003612 <__ieee754_sqrt+0x136>
 8003600:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003604:	e9da 0100 	ldrd	r0, r1, [sl]
 8003608:	e9db 2300 	ldrd	r2, r3, [fp]
 800360c:	d126      	bne.n	800365c <__ieee754_sqrt+0x180>
 800360e:	3501      	adds	r5, #1
 8003610:	463c      	mov	r4, r7
 8003612:	106a      	asrs	r2, r5, #1
 8003614:	0863      	lsrs	r3, r4, #1
 8003616:	07e9      	lsls	r1, r5, #31
 8003618:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800361c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003620:	bf48      	it	mi
 8003622:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003626:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800362a:	461c      	mov	r4, r3
 800362c:	e76d      	b.n	800350a <__ieee754_sqrt+0x2e>
 800362e:	0ad3      	lsrs	r3, r2, #11
 8003630:	3815      	subs	r0, #21
 8003632:	0552      	lsls	r2, r2, #21
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0fa      	beq.n	800362e <__ieee754_sqrt+0x152>
 8003638:	02dc      	lsls	r4, r3, #11
 800363a:	d50a      	bpl.n	8003652 <__ieee754_sqrt+0x176>
 800363c:	f1c1 0420 	rsb	r4, r1, #32
 8003640:	fa22 f404 	lsr.w	r4, r2, r4
 8003644:	1e4d      	subs	r5, r1, #1
 8003646:	408a      	lsls	r2, r1
 8003648:	4323      	orrs	r3, r4
 800364a:	1b41      	subs	r1, r0, r5
 800364c:	e772      	b.n	8003534 <__ieee754_sqrt+0x58>
 800364e:	4608      	mov	r0, r1
 8003650:	e7f0      	b.n	8003634 <__ieee754_sqrt+0x158>
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	3101      	adds	r1, #1
 8003656:	e7ef      	b.n	8003638 <__ieee754_sqrt+0x15c>
 8003658:	46e0      	mov	r8, ip
 800365a:	e7aa      	b.n	80035b2 <__ieee754_sqrt+0xd6>
 800365c:	f7fc fdda 	bl	8000214 <__adddf3>
 8003660:	e9da 8900 	ldrd	r8, r9, [sl]
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4640      	mov	r0, r8
 800366a:	4649      	mov	r1, r9
 800366c:	f7fd f9fa 	bl	8000a64 <__aeabi_dcmplt>
 8003670:	b120      	cbz	r0, 800367c <__ieee754_sqrt+0x1a0>
 8003672:	1ca0      	adds	r0, r4, #2
 8003674:	bf08      	it	eq
 8003676:	3501      	addeq	r5, #1
 8003678:	3402      	adds	r4, #2
 800367a:	e7ca      	b.n	8003612 <__ieee754_sqrt+0x136>
 800367c:	3401      	adds	r4, #1
 800367e:	f024 0401 	bic.w	r4, r4, #1
 8003682:	e7c6      	b.n	8003612 <__ieee754_sqrt+0x136>
 8003684:	7ff00000 	.word	0x7ff00000
 8003688:	200038a0 	.word	0x200038a0
 800368c:	200038a8 	.word	0x200038a8

08003690 <_init>:
 8003690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003692:	bf00      	nop
 8003694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003696:	bc08      	pop	{r3}
 8003698:	469e      	mov	lr, r3
 800369a:	4770      	bx	lr

0800369c <_fini>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr
